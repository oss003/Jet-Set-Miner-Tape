
                   6502 Macro Assembler   -   Version 4.00f 
                Copyright (C) 1985 by 2500 A.D. Software, Inc.


                         ***** Active Commands *****

                           Ctrl S = Stop Output
                           Ctrl Q = Start Output
                           Esc  C = Stop Assembly
                           Esc  T = Terminal Output
                           Esc  P = Printer Output
                           Esc  D = Disk Output
                           Esc  M = Multiple Output
                           Esc  N = No Output


  Tue Dec 29 2015 18:30                                                                                                  Page    1







               2500 A.D. 6502 Macro Assembler  -  Version 4.00f
               ------------------------------------------------

                       Input  Filename : jsm-mon.asm
                       Output Filename : jsm-mon.obj


    1   2AAA                                   org $2ac0-22
    2                           
    3                           ;****************************************
    4                           ; Header for Atom emulator Wouter Ras
    5   2AAA   4A 53 4D 20 20                    .db "JSM             "
        2AAF   20 20 20 20 20 
        2AB4   20 20 20 20 20 
        2AB9   20 
    6   2ABA   C02A                              .dw $2ac0
    7   2ABC   C02A                              .dw $2ac0
    8   2ABE   2B11                              .dw eind_asm-start_asm
    9                           ;****************************************
   10   2AC0                    start_asm    
   11   2AC0                                   include macros.inc
   12                           PRTTEXT .MACRO text,xpos,ypos,length
   13                                   lda #(xpos+<$8000)      ;X=11 Y=13
   14                                   sta tmp
   15                                   lda #(ypos+>$8000)
   16                                   sta tmp+1
   17                                   ldy #0
   18                           
   19                                   ldx #0       
   20                           dotitl#
   21                                   lda title,x      ;Title text is just bitmap saying 'PRESS FIRE'
   22                                   sta (tmp),y
   23                                   tya
   24                                   clc
   25                                   adc #$20
   26                                   tay
   27                                   bne noinc#
   28                                   inc tmp 
   29                           noinc#
   30                                   inx
   31                                   cpx #(length*8)
   32                                   bne dotitl#
   33                           .MACEND       
   34                           
   35                           PLOTSPRITE .MACRO nr,xpos,ypos
   36                                   lda #nr       
   37                                   ldx #xpos
   38                                   ldy #ypos
   39                                   jsr drawspr
   40                           .MACEND
   41                           
   42   2AC0                                   include jsm.inc
   43                           ;----------------------------------------------------------------------------------------
   44                           ;JET SET MINER (formally PLAT 3064)
   45                           ;
   46                           ;Written by Tom Walker
   47                           ;Original in 2003 (for Minigame 2003 4K competition) for C64
   48                           ;BBC/Electron conversion in 2009
   49                           ;Atom conversion in 2010 by Kees van Oss
   50                           ;
   51                           ;To be assembled with P65 and probably Swift
   52                           ;
   53                           ;I was 15 when I wrote this, so don't complain about the horrible coding
   54                           ;This was written to fit in 4K, however some of the coding seems a bit 'big'
   55                           ;Could probably be improved. If I'd made the more obvious size optimisations,
   56                           ;it could have had twice as many levels as it does and still been 4K.
   57                           ;
   58                           ;The entire game has been made OS legal. This means it runs on any BBC or Electron
   59                           ;with 32k of RAM. Older versions weren't OS legal, this meant they could run on
   60                           ;a Model A.
   61                           ;
   62                           ;Suggestions for improvements :
   63                           ;
   64                           ; - More levels (obv). You could fit ~50 levels into an extra 4k.
   65                           ; - Move enemies (would need an extra entry in the enemy tables, unless it's one
   66                           ;   type per level)
   67                           ; - More types of block per level. This would reduce the efficiency of the compression. 
   68                           ; - Colour. Mode 5 should be easy, though some changes would be needed to collision
   69                           ;   detection. Mode 1 or 2 would need more changes to the drawing routines
   70                           ; - Sound. Should be fairly easy.  
   71                           ;----------------------------------------------------------------------------------------
   72                           
   73                           
   74   2AC0                    gamedata:
   75          FE71             SCANKEY  equ $FE71
   76          FE66             WAITSYNC equ $FE66
   77                           
   78          0080             TMPVAR   equ $80
   79          00C0             WORKSPC  equ $C0
   80          00D0             VARS     equ $D0
   81                           
   82                           ;Game variables
   83          00C0             PLX      equ WORKSPC    ;Player position
   84          00C1             PLY      equ WORKSPC+1
   85          00C2             PLF      equ WORKSPC+2  ;Player falling?
   86          00C3             PLD      equ WORKSPC+3  ;Direction player is facing
   87          00C4             PLJ      equ WORKSPC+4  ;Player jumping?
   88          00C5             KEYSLEFT equ WORKSPC+5  ;Number of keys left in level
   89          00C6             COLLIDE  equ WORKSPC+6  ;Collision detected?
   90          00C7             CHKCOL   equ WORKSPC+7  ;Check collisions when drawing sprites
   91          00C8             LEVEL    equ WORKSPC+8  ;Level number (0-3)
   92          00C9             DEAD     equ WORKSPC+9  ;Player dead?
   93          00CA             LEVCOMP  equ WORKSPC+$A ;Level completed?
   94          00CB             LIVES    equ WORKSPC+$B ;Player lives left
   95          00CC             LCOMP    equ WORKSPC+$C ;Current level (not limited to 0-3)
   96          00CF             VSYNCCNT equ WORKSPC+$F ;Vsync count
   97                           
   98          00D4             LEVELOVR equ VARS+4     ;Level over?
   99          00D5             TIME     equ VARS+5     ;Time left (2)
  100          00D7             TIMEL    equ VARS+7     ;Time limit for current round of levels
  101          00D8             tmp      equ VARS+8     ; (2)
  102                           
  103                           ;lev1     equ $400       ;Level data is decompressed to here
  104                           ;ENMY     equ $900       ;Byte 0 - X pos  Byte 1 - Y pos  Byte 2 - X min  Byte 3 - X max  Byte 4 - d
                            irection
  105                           
  106                           ;--- Main routine ---
  107                           
  108   2AC0                    main:
  109   2AC0   A9 00                    lda #0           ;Clear game variables
  110   2AC2   A2 0F                    ldx #15
  111   2AC4   95 C0            l1      sta WORKSPC,x
  112   2AC6   CA                       dex
  113   2AC7   10 FB                    bpl l1
  114   2AC9                            
  115   2AC9   85 D4                    sta LEVELOVR     ;Reset level over flag
  116   2ACB   20 EA 32                 jsr clear        ;Clear screen
  117                           
  118                           ;Set up title text
  119   2ACE   A9 0B                    lda #<$8d0b      ;X=11 Y=13
  120   2AD0   85 D8                    sta tmp
  121   2AD2   A9 8D                    lda #>$8d0b
  122   2AD4   85 D9                    sta tmp+1
  123   2AD6   A0 00                    ldy #0
  124                           
  125   2AD8   A2 00                    ldx #0       
  126   2ADA                    dotitl:
  127   2ADA   BD D4 37                 lda title,x      ;Title text is just bitmap saying 'PRESS FIRE'
  128   2ADD   91 D8                    sta (tmp),y
  129   2ADF   98                       tya
  130   2AE0   18                       clc
  131   2AE1   69 20                    adc #$20
  132   2AE3   A8                       tay
  133   2AE4   D0 02                    bne noinc
  134   2AE6   E6 D8                    inc tmp 
  135   2AE8                    noinc:
  136   2AE8   E8                       inx
  137   2AE9   E0 50                    cpx #80
  138   2AEB   D0 ED                    bne dotitl
  139                           
  140                           ;Draw player sprites on title screen
  141   2AED   A9 00                    lda #0       
  142   2AEF   A2 00                    ldx #0
  143   2AF1   A0 00                    ldy #0
  144   2AF3   20 D2 30                 jsr drawspr
  145   2AF6   A9 00                    lda #0
  146   2AF8   A2 12                    ldx #18
  147   2AFA   A0 00                    ldy #0
  148   2AFC   20 D2 30                 jsr drawspr
  149   2AFF   A9 00                    lda #0
  150   2B01   A2 24                    ldx #36
  151   2B03   A0 00                    ldy #0
  152   2B05   20 D2 30                 jsr drawspr
  153   2B08   A9 00                    lda #0
  154   2B0A   A2 36                    ldx #54
  155   2B0C   A0 00                    ldy #0
  156   2B0E   20 D2 30                 jsr drawspr
  157                           
  158   2B11   A9 01                    lda #1
  159   2B13   A2 F0                    ldx #240
  160   2B15   A0 00                    ldy #0
  161   2B17   20 D2 30                 jsr drawspr
  162   2B1A   A9 01                    lda #1
  163   2B1C   A2 DE                    ldx #222
  164   2B1E   A0 00                    ldy #0
  165   2B20   20 D2 30                 jsr drawspr
  166   2B23   A9 01                    lda #1
  167   2B25   A2 CC                    ldx #204
  168   2B27   A0 00                    ldy #0
  169   2B29   20 D2 30                 jsr drawspr
  170   2B2C   A9 01                    lda #1
  171   2B2E   A2 BA                    ldx #186
  172   2B30   A0 00                    ldy #0
  173   2B32   20 D2 30                 jsr drawspr
  174                           
  175   2B35                    wait:
  176   2B35   AD 01 B0                 lda $b001        ;Wait for 'SHIFT'
  177   2B38   29 80                    and #$80
  178   2B3A   D0 F9                    bne wait
  179                           
  180                           ;Start game level 0
  181   2B3C                    init:
  182   2B3C   A9 00                    lda #0           ;Start on level 0
  183   2B3E   85 C8                    sta LEVEL
  184   2B40   85 CC                    sta LCOMP
  185   2B42   A9 03                    lda #3           ;3 lives
  186   2B44   85 CB                    sta LIVES
  187   2B46   A9 09                    lda #9           ;Time starts at 999
  188   2B48   85 D7                    sta TIMEL
  189   2B4A                    dothelv:
  190   2B4A   A9 00                    lda #0           ;Not dead!
  191   2B4C   85 C9                    sta DEAD
  192   2B4E   A9 99                    lda #$99         ;Set time to (TIMEL*100)+99
  193   2B50   85 D5                    sta TIME
  194   2B52   A5 D7                    lda TIMEL
  195   2B54   85 D6                    sta TIME+1
  196   2B56   85 CA                    sta LEVCOMP
  197                           
  198   2B58   20 6C 2B                 jsr start        ;Run level
  199                           
  200   2B5B   C9 01                    cmp #1           ;Did we die?
  201   2B5D   F0 03                    beq dodie        ;Then jump to death code
  202   2B5F                    nxtlev:
  203   2B5F   4C 4A 2B                 jmp dothelv      ;Otherwise run next level
  204                           
  205   2B62   C6 CB            dodie:  dec LIVES        ;Decrease our lives
  206   2B64   30 03                    bmi endgame      ;End the game if out
  207   2B66   4C 5F 2B                 jmp nxtlev       ;Otherwise start level again
  208                           
  209   2B69                    endgame:
  210   2B69   4C C0 2A                 jmp main         ;Restart game if out of lives
  211                           
  212                           ;--- Start level ---
  213                           
  214   2B6C                    start:
  215   2B6C   20 EA 32                 jsr clear        ;Clear screen
  216                           
  217   2B6F   A9 00                    lda #0
  218   2B71   85 D4                    sta LEVELOVR
  219   2B73                            
  220   2B73   A5 C8                    lda LEVEL        ;Get level number
  221   2B75   0A                       asl a
  222   2B76   0A                       asl a
  223   2B77   AA                       tax
  224   2B78   86 80                    stx TMPVAR
  225   2B7A   BD 4D 3A                 lda levtab+1,x   ;Put address into X,Y
  226   2B7D   A8                       tay
  227   2B7E   BD 4C 3A                 lda levtab,x
  228   2B81   AA                       tax
  229   2B82   20 C3 31                 jsr decomp       ;And decompress
  230                           
  231   2B85   A6 80                    ldx TMPVAR
  232   2B87   BD 4F 3A                 lda levtab+3,x
  233   2B8A   A8                       tay
  234   2B8B   BD 4E 3A                 lda levtab+2,x
  235   2B8E   AA                       tax
  236   2B8F   20 AB 31                 jsr dolh         ;Copy level header to current level
  237   2B92   20 1D 2E                 jsr drawlev      ;Draw level
  238                           
  239   2B95   20 F6 31                 jsr mkdispb      ;Make status text ('display bottom')
  240                           
  241   2B98   A2 00                    ldx #0
  242   2B9A                    enmyl1:
  243   2B9A   BD 66 3A                 lda levhead+10,x ;Copy enemy data from level header into enemy structure
  244   2B9D   9D 2B 33                 sta ENMY,x
  245   2BA0   E8                       inx
  246   2BA1   E0 14                    cpx #20
  247   2BA3   D0 F5                    bne enmyl1
  248                           
  249   2BA5   A9 04                    lda #4           ;Reset number of keys left
  250   2BA7   85 C5                    sta KEYSLEFT
  251   2BA9   A9 00                    lda #0
  252   2BAB   85 C6                    sta COLLIDE
  253                           
  254   2BAD   A2 08                    ldx #8           ;Player always starts in same position
  255   2BAF   86 C0                    stx PLX
  256   2BB1   A0 88                    ldy #136
  257   2BB3   84 C1                    sty PLY
  258   2BB5   A9 00                    lda #0           ;Neither dropping nor jumping
  259   2BB7   85 C3                    sta PLD
  260   2BB9   85 C4                    sta PLJ
  261   2BBB   20 D2 30                 jsr drawspr      ;Place initial player sprite on screen (at X,Y)
  262   2BBE                            
  263   2BBE   AE 2B 33                 ldx ENMY         ;Get first enemy coordinates
  264   2BC1   AC 2C 33                 ldy ENMY+1
  265   2BC4   AD 2F 33                 lda ENMY+4       ;Get enemy sprite number
  266   2BC7   C9 FF                    cmp #$ff         ;Does enemy actually exist?
  267   2BC9   F0 05                    beq en21         ;Jump if not
  268   2BCB   09 02                    ora #2        
  269   2BCD   20 D2 30                 jsr drawspr      ;Otherwise draw
  270   2BD0                    en21:
  271   2BD0   AE 30 33                 ldx ENMY+5       ;Repeat for other enemies (could do with a loop)
  272   2BD3   AC 31 33                 ldy ENMY+6
  273   2BD6   AD 34 33                 lda ENMY+9
  274   2BD9   C9 FF                    cmp #$ff
  275   2BDB   F0 05                    beq en31
  276   2BDD   09 02                    ora #2
  277   2BDF   20 D2 30                 jsr drawspr
  278   2BE2                    en31:
  279   2BE2   AE 35 33                 ldx ENMY+10
  280   2BE5   AC 36 33                 ldy ENMY+11
  281   2BE8   AD 39 33                 lda ENMY+14
  282   2BEB   C9 FF                    cmp #$ff
  283   2BED   F0 05                    beq en41
  284   2BEF   09 02                    ora #2
  285   2BF1   20 D2 30                 jsr drawspr
  286   2BF4                    en41:
  287   2BF4   AE 3A 33                 ldx ENMY+15
  288   2BF7   AC 3B 33                 ldy ENMY+16
  289   2BFA   AD 3E 33                 lda ENMY+19
  290   2BFD   C9 FF                    cmp #$ff
  291   2BFF   F0 05                    beq en51
  292   2C01   09 02                    ora #2
  293   2C03   20 D2 30                 jsr drawspr
  294   2C06                    en51:
  295   2C06   A9 00                    lda #0           ;Disable collision detection
  296   2C08   85 C7                    sta CHKCOL
  297   2C0A                    loop:
  298   2C0A   20 BC 2E                 jsr vsync        ;Wait 5 vsyncs (locks to 10 fps - fairly arbitary)
  299   2C0D   A5 C3                    lda PLD
  300   2C0F   A6 C0                    ldx PLX
  301   2C11   A4 C1                    ldy PLY
  302   2C13   20 D2 30                 jsr drawspr      ;Erase player
  303   2C16   AE 2B 33                 ldx ENMY
  304   2C19   AC 2C 33                 ldy ENMY+1
  305   2C1C   AD 2F 33                 lda ENMY+4
  306   2C1F   C9 FF                    cmp #$ff
  307   2C21   F0 05                    beq en22
  308   2C23   09 02                    ora #2
  309   2C25   20 D2 30                 jsr drawspr      ;Erase enemies
  310   2C28                    en22:
  311   2C28   AE 30 33                 ldx ENMY+5
  312   2C2B   AC 31 33                 ldy ENMY+6
  313   2C2E   AD 34 33                 lda ENMY+9
  314   2C31   C9 FF                    cmp #$ff
  315   2C33   F0 05                    beq en32
  316   2C35   09 02                    ora #2
  317   2C37   20 D2 30                 jsr drawspr
  318   2C3A                    en32:
  319   2C3A   AE 35 33                 ldx ENMY+10
  320   2C3D   AC 36 33                 ldy ENMY+11
  321   2C40   AD 39 33                 lda ENMY+14
  322   2C43   C9 FF                    cmp #$ff
  323   2C45   F0 05                    beq en42
  324   2C47   09 02                    ora #2
  325   2C49   20 D2 30                 jsr drawspr
  326   2C4C                    en42:
  327   2C4C   AE 3A 33                 ldx ENMY+15
  328   2C4F   AC 3B 33                 ldy ENMY+16
  329   2C52   AD 3E 33                 lda ENMY+19
  330   2C55   C9 FF                    cmp #$ff
  331   2C57   F0 05                    beq en52
  332   2C59   09 02                    ora #2
  333   2C5B   20 D2 30                 jsr drawspr
  334   2C5E                    en52:
  335   2C5E   20 14 2F                 jsr guymove     ;Check input and move player
  336   2C61   20 72 2D                 jsr chkspk      ;See if we hit any spikes
  337   2C64   20 CD 2D                 jsr doenemy     ;Move enemies
  338   2C67   A5 C3                    lda PLD
  339   2C69   A6 C0                    ldx PLX
  340   2C6B   A4 C1                    ldy PLY
  341   2C6D   20 D2 30                 jsr drawspr     ;Draw player
  342   2C70   A9 01                    lda #1          ;Re-enable collision detection
  343   2C72   85 C7                    sta CHKCOL
  344   2C74   AE 2B 33                 ldx ENMY        ;Draw enemies
  345   2C77   AC 2C 33                 ldy ENMY+1
  346   2C7A   AD 2F 33                 lda ENMY+4
  347   2C7D   C9 FF                    cmp #$ff
  348   2C7F   F0 05                    beq en2
  349   2C81   09 02                    ora #2
  350   2C83   20 D2 30                 jsr drawspr
  351   2C86                    en2:
  352   2C86   AE 30 33                 ldx ENMY+5
  353   2C89   AC 31 33                 ldy ENMY+6
  354   2C8C   AD 34 33                 lda ENMY+9
  355   2C8F   C9 FF                    cmp #$ff
  356   2C91   F0 05                    beq en3
  357   2C93   09 02                    ora #2
  358   2C95   20 D2 30                 jsr drawspr
  359   2C98                    en3:
  360   2C98   AE 35 33                 ldx ENMY+10
  361   2C9B   AC 36 33                 ldy ENMY+11
  362   2C9E   AD 39 33                 lda ENMY+14
  363   2CA1   C9 FF                    cmp #$ff
  364   2CA3   F0 05                    beq en4
  365   2CA5   09 02                    ora #2
  366   2CA7   20 D2 30                 jsr drawspr
  367   2CAA                    en4:
  368   2CAA   AE 3A 33                 ldx ENMY+15
  369   2CAD   AC 3B 33                 ldy ENMY+16
  370   2CB0   AD 3E 33                 lda ENMY+19
  371   2CB3   C9 FF                    cmp #$ff
  372   2CB5   F0 05                    beq en5
  373   2CB7   09 02                    ora #2
  374   2CB9   20 D2 30                 jsr drawspr
  375   2CBC                    en5:
  376   2CBC   A9 00                    lda #0          ;Disable collision detection
  377   2CBE   85 C7                    sta CHKCOL
  378   2CC0   A5 C6                    lda COLLIDE     ;And test results of previous checks
  379   2CC2   D0 17                    bne die         ;Jump if a collision - ie monster collided with player
  380   2CC4   20 E0 2C                 jsr chkover     ;Check if level completed
  381   2CC7   A5 C9                    lda DEAD        ;Redundant? die: should sort this
  382   2CC9   D0 0F                    bne endital
  383   2CCB   A5 CA                    lda LEVCOMP     ;If LEVCOMP=FF then we've completed the level, exit loop
  384   2CCD   49 FF                    eor #$ff        ;This ensures A=0 when we exit
  385   2CCF   F0 09                    beq endital
  386   2CD1   20 6A 32                 jsr updb        ;Update status ('display bottom')
  387   2CD4   20 D1 32                 jsr uptime      ;Update time
  388   2CD7   4C 0A 2C                 jmp loop        ;Jump back to start
  389                           
  390   2CDA                    endital:
  391   2CDA   60                       rts
  392                           
  393   2CDB                    die:
  394   2CDB   A9 01                    lda #1          ;Set DEAD flag and return (A=1)
  395   2CDD   85 C9                    sta DEAD
  396   2CDF   60                       rts
  397                           
  398   2CE0                    chkover:
  399   2CE0   A5 D4                    lda LEVELOVR    ;If level is over
  400   2CE2   D0 02                    bne nextlev     ;Then enter next one
  401   2CE4   60                       rts
  402                           
  403   2CE5                    chkexit:
  404   2CE5   60                       rts             ;Redundant - needed in C64 version
  405                           
  406   2CE6                    nextlev:
  407   2CE6   A9 00                    lda #0          ;Reset completion flags
  408   2CE8   85 D4                    sta LEVELOVR
  409   2CEA   A9 FF                    lda #$ff
  410   2CEC   85 CA                    sta LEVCOMP
  411   2CEE   F8                       sed
  412   2CEF   A5 CC                    lda LCOMP       ;Increment level number (used in status display)
  413   2CF1   18                       clc
  414   2CF2   69 01                    adc #1
  415   2CF4   85 CC                    sta LCOMP
  416   2CF6   D8                       cld
  417   2CF7   E6 C8                    inc LEVEL       ;Increment actual level number (AND 3 cos there are 4 levels)
  418   2CF9   A5 C8                    lda LEVEL
  419   2CFB   29 03                    and #3
  420   2CFD   85 C8                    sta LEVEL
  421   2CFF   F0 01                    beq chgtime     ;If back to level 0 then we need to change the time limit
  422   2D01   60                       rts
  423                           
  424   2D02                    chgtime:
  425   2D02   C6 D7                    dec TIMEL       ;Decrease time limit
  426   2D04   60                       rts             ;No checks as when time gets to 099 no-one will be able to complete a level
  427                           
  428                           ;makexit - puts an exit in the level
  429   2D05                    makexit:
  430   2D05   AD 64 3A                 lda levhead+8   ;Get exit position from level header
  431   2D08   85 86                    sta  TMPVAR+6
  432   2D0A   AD 65 3A                 lda levhead+9
  433   2D0D   18                       clc
  434   2D0E   69 80                    adc #$80
  435   2D10   85 87                    sta TMPVAR+7
  436   2D12                            
  437   2D12   A0 00                    ldy #0
  438   2D14   A2 00                    ldx #0          ;Copy top half of door sprite onto screen
  439   2D16                    l2:
  440   2D16   BD 24 3A                 lda doorspr,x
  441   2D19   91 86                    sta (TMPVAR+6),y
  442   2D1B   E8                       inx
  443   2D1C   98                       tya
  444   2D1D   18                       clc
  445   2D1E   69 20                    adc #$20
  446   2D20   A8                       tay
  447   2D21   A5 87                    lda TMPVAR+7
  448   2D23   69 00                    adc #0
  449   2D25   85 87                    sta TMPVAR+7
  450   2D27   E0 10                    cpx #16
  451   2D29   D0 EB                    bne l2
  452   2D2B                            
  453   2D2B   E6 86                    inc TMPVAR+6    ;Move down one character line
  454   2D2D   C6 87                    dec TMPVAR+7
  455   2D2F   C6 87                    dec TMPVAR+7
  456                           
  457   2D31   A0 00                    ldy #0
  458   2D33   A2 00                    ldx #0          ;And copy bottom half
  459   2D35                    l3: 
  460   2D35   BD 34 3A                 lda doorspr+16,x
  461   2D38   91 86                    sta (TMPVAR+6),y
  462   2D3A   E8                       inx
  463   2D3B   98                       tya
  464   2D3C   18                       clc
  465   2D3D   69 20                    adc #$20
  466   2D3F   A8                       tay
  467   2D40   A5 87                    lda TMPVAR+7
  468   2D42   69 00                    adc #0
  469   2D44   85 87                    sta TMPVAR+7
  470   2D46   E0 10                    cpx #16
  471   2D48   D0 EB                    bne l3
  472   2D4A                            
  473   2D4A   AD 64 3A                 lda levhead+8   ;Use door position to lookup level data
  474   2D4D   85 82                    sta TMPVAR+2
  475   2D4F   AD 65 3A                 lda levhead+9
  476   2D52   85 83                    sta TMPVAR+3
  477   2D54   A9 00                    lda #0
  478                           
  479   2D56   20 06 33                 jsr savespc
  480                           
  481   2D59   A4 82                    ldy TMPVAR+2
  482   2D5B   A9 80                    lda #$80        ;Store $80 at locations door occupies
  483   2D5D   91 83                    sta (TMPVAR+3),y;Once all keys are gone, scanning rountine will see this as exit
  484   2D5F   C8                       iny
  485   2D60   91 83                    sta (TMPVAR+3),y
  486   2D62   A5 83                    lda TMPVAR+3
  487   2D64   18                       clc
  488   2D65   69 20                    adc #32
  489   2D67   85 83                    sta TMPVAR+3
  490   2D69   88                       dey
  491   2D6A   A9 80                    lda #$80        
  492   2D6C   91 83                    sta (TMPVAR+3),y
  493   2D6E   C8                       iny
  494   2D6F   91 83                    sta (TMPVAR+3),y                
  495                           
  496   2D71   60                       rts
  497                           
  498   2D72                    chkspk:
  499   2D72   A5 C0                    lda PLX         ;Get player location
  500   2D74   4A                       lsr a           ;And shift down to use as level index
  501   2D75   4A                       lsr a
  502   2D76   4A                       lsr a
  503   2D77   AA                       tax
  504   2D78   A5 C1                    lda PLY
  505   2D7A   4A                       lsr a
  506   2D7B   4A                       lsr a
  507   2D7C   4A                       lsr a
  508   2D7D   A8                       tay
  509   2D7E   86 8E                    stx TMPVAR+$e   ;Store
  510   2D80   84 8F                    sty TMPVAR+$f
  511   2D82   20 7E 30                 jsr getblk1     ;Get block
  512   2D85   C9 03                    cmp #3          ;Is is 3? (spike)
  513   2D87   F0 41                    beq hitspk      ;Jump if we hit
  514   2D89   A6 8E                    ldx TMPVAR+$e   ;Repeat for all surrounding blocks
  515   2D8B   A4 8F                    ldy TMPVAR+$f
  516   2D8D   E8                       inx
  517   2D8E   20 7E 30                 jsr getblk1
  518   2D91   C9 03                    cmp #3
  519   2D93   F0 35                    beq hitspk
  520   2D95   A6 8E                    ldx TMPVAR+$e
  521   2D97   A4 8F                    ldy TMPVAR+$f
  522   2D99   C8                       iny
  523   2D9A   20 7E 30                 jsr getblk1
  524   2D9D   C9 03                    cmp #3
  525   2D9F   F0 29                    beq hitspk
  526   2DA1   A6 8E                    ldx TMPVAR+$e
  527   2DA3   A4 8F                    ldy TMPVAR+$f
  528   2DA5   E8                       inx
  529   2DA6   C8                       iny
  530   2DA7   20 7E 30                 jsr getblk1
  531   2DAA   C9 03                    cmp #3
  532   2DAC   F0 1C                    beq hitspk
  533   2DAE   A6 8E                    ldx TMPVAR+$e
  534   2DB0   A4 8F                    ldy TMPVAR+$f
  535   2DB2   C8                       iny
  536   2DB3   C8                       iny
  537   2DB4   84 8F                    sty TMPVAR+$f
  538   2DB6   20 7E 30                 jsr getblk1
  539   2DB9   C9 03                    cmp #3
  540   2DBB   F0 0D                    beq hitspk
  541   2DBD   A6 8E                    ldx TMPVAR+$e
  542   2DBF   A4 8F                    ldy TMPVAR+$f
  543   2DC1   E8                       inx
  544   2DC2   20 7E 30                 jsr getblk1
  545   2DC5   C9 03                    cmp #3
  546   2DC7   F0 01                    beq hitspk
  547   2DC9   60                       rts
  548                           
  549   2DCA                    hitspk:
  550   2DCA   4C DB 2C                 jmp die        ;If you hit a spike you die!
  551                           
  552   2DCD                    doenemy:
  553   2DCD   A9 2B                    lda #<ENMY     ;Get enemy data address into $fe (for indirect Y mode)
  554   2DCF   85 D0                    sta VARS
  555   2DD1   A9 33                    lda #>ENMY
  556   2DD3   85 D1                    sta VARS+1
  557   2DD5   A2 00                    ldx #0
  558   2DD7                    enmyl2:
  559   2DD7   A0 04                    ldy #4         ;Get index 4 (direction)
  560   2DD9   B1 D0                    lda (VARS),y
  561   2DDB   C9 FF                    cmp #$ff
  562   2DDD   F0 31                    beq enmynxt    ;If $FF then enemy doesn't exist
  563   2DDF   B1 D0                    lda (VARS),y
  564   2DE1   D0 18                    bne enemyl     ;If it's not 0 then it's left
  565                           
  566   2DE3                    enemyr:
  567   2DE3   A0 00                    ldy #0         ;Else it's right
  568   2DE5   B1 D0                    lda (VARS),y   ;Get index 0 (X position)
  569   2DE7   18                       clc
  570   2DE8   69 02                    adc #2         ;Move him right
  571   2DEA   91 D0                    sta (VARS),y
  572   2DEC   A0 03                    ldy #3         ;Get index 3 (rightmost position)
  573   2DEE   D1 D0                    cmp (VARS),y 
  574   2DF0   D0 1E                    bne enmynxt    ;If enemy isn't there then jump
  575   2DF2   A0 04                    ldy #4         ;Otherwise reverse direction
  576   2DF4   A9 01                    lda #1
  577   2DF6   91 D0                    sta (VARS),y
  578   2DF8   4C 10 2E                 jmp enmynxt
  579                           
  580   2DFB                    enemyl:
  581   2DFB   A0 00                    ldy #0         ;Get index 0 (X position)
  582   2DFD   B1 D0                    lda (VARS),y
  583   2DFF   38                       sec
  584   2E00   E9 02                    sbc #2         ;Move him left
  585   2E02   91 D0                    sta (VARS),y
  586   2E04   A0 02                    ldy #2         ;Get index 2 (leftmost position)
  587   2E06   D1 D0                    cmp (VARS),y
  588   2E08   D0 06                    bne enmynxt    ;If enemy isn't there then jump
  589   2E0A   A0 04                    ldy #4         ;Overwise reverse direction
  590   2E0C   A9 00                    lda #0
  591   2E0E   91 D0                    sta (VARS),y
  592                           
  593   2E10                    enmynxt:
  594   2E10   A5 D0                    lda VARS       ;Move $FE pointer on 5 bytes (next enemy)
  595   2E12   18                       clc
  596   2E13   69 05                    adc #5
  597   2E15   85 D0                    sta VARS
  598   2E17   E8                       inx
  599   2E18   E0 05                    cpx #5        ;Are we at 20 (4 enemies * 5 bytes each)?
  600   2E1A   D0 BB                    bne enmyl2     ;No, then jump to top of loop
  601   2E1C   60                       rts            ;Otherwise return
  602                           
  603   2E1D                    drawlev:
  604   2E1D   A9 44                    lda #<lev1     ;Put level address into 2/3
  605   2E1F   85 82                    sta TMPVAR+2
  606   2E21   A9 33                    lda #>lev1
  607   2E23   85 83                    sta TMPVAR+3
  608                           
  609   2E25   A9 14                    lda #20        ;Number of rows to draw (20)
  610   2E27   85 88                    sta TMPVAR+8
  611   2E29   A9 80                    lda #$80       ;Starting screen address (4 columns from start of screen)
  612   2E2B   85 85                    sta TMPVAR+5
  613   2E2D   A9 00                    lda #0
  614   2E2F   85 84                    sta TMPVAR+4
  615                           
  616   2E31                    drawvl:
  617   2E31   A0 00                    ldy #0         ;Start at horizontal position 0
  618   2E33                    drawhl:
  619   2E33   B1 82                    lda (TMPVAR+2),y;Get tile number     
  620                                                   ;(2) = map (6) = tile addr  (4) = screen addr
  621   2E35   0A                         asl a         ;Multiply by 8, to use as an index into tiles
  622   2E36   0A                         asl a
  623   2E37   0A                         asl a
  624   2E38   18                         clc
  625   2E39   69 C4                      adc #<tiles   ;Add tile address
  626   2E3B   85 86                      sta TMPVAR+6
  627   2E3D   A9 00                      lda #0
  628   2E3F   69 35                      adc #>tiles
  629   2E41   85 87                      sta TMPVAR+7
  630                           
  631   2E43   98                         tya
  632   2E44   48                         pha
  633   2E45   A2 07                      ldx #7
  634   2E47   86 8A                      stx TMPVAR+$A
  635   2E49   A4 8A            tileloop: ldy TMPVAR+$A 
  636   2E4B   B1 86                      lda (TMPVAR+6),y     ;Copy tile (8 bytes, 8x8 pixels in mode 4)
  637   2E4D   BC 24 37                   ldy scrptr,x 
  638   2E50   91 84                       sta (TMPVAR+4),y
  639   2E52   CA                          dex
  640   2E53   C6 8A                       dec TMPVAR+$A
  641   2E55   A5 8A                       lda TMPVAR+$A
  642   2E57   10 F0                       bpl tileloop
  643   2E59                       
  644   2E59   68                         pla
  645   2E5A   A8                         tay
  646                           
  647   2E5B   E6 84                      inc TMPVAR+4     ;Move screen address on 8
  648                           
  649   2E5D   C8                         iny        ;We at end of row?
  650   2E5E   C0 20                      cpy #32
  651   2E60   D0 D1                      bne drawhl ;Loop if not
  652                           
  653   2E62   E6 85                     inc TMPVAR+5     ;Move screen down a line and back 32 characters
  654   2E64   A9 00                     lda #0
  655   2E66   85 84                     sta TMPVAR+4
  656                           
  657   2E68   A5 82                     lda TMPVAR+2     ;Move level data address down a row
  658   2E6A   18                        clc
  659   2E6B   69 20                     adc #32
  660   2E6D   85 82                     sta TMPVAR+2
  661   2E6F   A5 83                     lda TMPVAR+3
  662   2E71   69 00                     adc #0
  663   2E73   85 83                     sta TMPVAR+3
  664                           
  665   2E75   C6 88                     dec TMPVAR+8      ;Decrease rows left count
  666   2E77   D0 B8                     bne drawvl ;and jump back
  667                           
  668                           ;Draw key sprites onto screen
  669   2E79   A0 00                    ldy #0 ;Start with key 0
  670   2E7B                    keysprl:
  671   2E7B   B9 5C 3A                 lda levhead,y ;Get location out of level header
  672                           
  673   2E7E   85 86                    sta TMPVAR+6
  674   2E80   B9 5D 3A                 lda levhead+1,y
  675   2E83   18                       clc
  676   2E84   69 80                    adc #$80
  677   2E86   85 87                    sta TMPVAR+7
  678                           
  679   2E88   98                       tya
  680   2E89   48                       pha
  681   2E8A                                    
  682   2E8A   A0 00                    ldy #0
  683   2E8C   A2 00                    ldx #0       ;Copy key graphic (was a sprite on C64) onto screen
  684   2E8E   BD 44 3A         l4      lda keyspr,x
  685   2E91   91 86                    sta (TMPVAR+6),y
  686   2E93   E8                       inx
  687   2E94   98                       tya
  688   2E95   18                       clc
  689   2E96   69 20                    adc #$20
  690   2E98   A8                       tay
  691   2E99   D0 F3                    bne l4 
  692   2E9B                            
  693   2E9B   68                       pla
  694   2E9C   48                       pha
  695   2E9D   A8                       tay
  696   2E9E                            
  697   2E9E   B9 5C 3A                 lda levhead,y   ;Get key location again
  698   2EA1   85 82                    sta TMPVAR+2           ;and index into level data
  699   2EA3   B9 5D 3A                 lda levhead+1,y
  700   2EA6   85 83                    sta TMPVAR+3
  701   2EA8   A9 00                    lda #0
  702                           
  703   2EAA   20 06 33                 jsr savespc
  704                           
  705   2EAD   A4 82                    ldy TMPVAR+2
  706   2EAF   A9 80                    lda #$80     ;$80 means key when there are still keys left
  707   2EB1   91 83                    sta (TMPVAR+3),y
  708   2EB3                            
  709   2EB3   68                       pla
  710   2EB4   A8                       tay
  711   2EB5                                     
  712   2EB5   C8                       iny          ;Increment key pointer
  713   2EB6   C8                       iny
  714   2EB7   C0 08                    cpy #8       ;At the end? (4 keys * 2 bytes each)
  715   2EB9   D0 C0                    bne keysprl
  716                           
  717   2EBB   60                       rts
  718                           
  719                           
  720   2EBC   20 66 FE         vsync:  jsr WAITSYNC
  721   2EBF   E6 CF                    inc VSYNCCNT
  722   2EC1   A5 CF                    lda VSYNCCNT
  723   2EC3   C9 03                    cmp #3        ;Wait til vsync count >=5
  724   2EC5   90 F5                    bcc vsync
  725   2EC7   A9 00                    lda #0
  726   2EC9   85 CF                    sta VSYNCCNT  ;Clear VSYNCCNT
  727   2ECB   60                       rts
  728                           
  729   2ECC   A9 00            falldie: lda #0
  730   2ECE   85 C2                    sta PLF 
  731   2ED0   4C DB 2C                 jmp die
  732                           
  733   2ED3   A5 C0            guyfall: lda PLX     ;Update falling player
  734   2ED5   4A                       lsr a         ;Get player position and shift down to block addresses
  735   2ED6   4A                       lsr a
  736   2ED7   4A                       lsr a
  737   2ED8   AA                       tax
  738   2ED9   A5 C1                    lda PLY
  739   2EDB   18                       clc
  740   2EDC   69 17                    adc #16+7
  741   2EDE   4A                       lsr a
  742   2EDF   4A                       lsr a
  743   2EE0   4A                       lsr a
  744   2EE1   A8                       tay
  745   2EE2   20 67 30                 jsr getblk   ;Get blocks immediately below player
  746   2EE5   D0 12                    bne stopf    ;If it's not air then stop falling
  747   2EE7   E6 C1                    inc PLY      ;Otherwise move player down
  748   2EE9   E6 C1                    inc PLY
  749   2EEB   E6 C1                    inc PLY
  750   2EED   E6 C1                    inc PLY
  751   2EEF   E6 C2                    inc PLF      ;Increase fall distance
  752   2EF1   60                       rts
  753                           
  754   2EF2   A9 01            stfall:  lda #1      ;Start fall - set PLF flag to one 
  755   2EF4   85 C2                    sta PLF
  756   2EF6   4C D3 2E                 jmp guyfall  ;then process fall
  757                           
  758   2EF9   A5 C2            stopf:  lda PLF     ;Stop falling - see how far we've fallen
  759   2EFB   C9 0C                    cmp #12     ;If we've fallen far enough (6 blocks)
  760   2EFD   B0 CD                    bcs falldie ;then kill player
  761   2EFF   A9 00                    lda #0      ;clear PLF flag
  762   2F01   85 C2                    sta PLF
  763   2F03   A5 C1                    lda PLY      ;Then adjust player Y so we're directly on a block
  764   2F05   18                       clc
  765   2F06   69 07                    adc #7
  766   2F08   29 F8                    and #$F8
  767   2F0A   85 C1                    sta PLY
  768   2F0C   60                       rts
  769                           
  770   2F0D   A9 07            startj:  lda #7      ;Start jump - set maximum upwards momentum in PLJ
  771   2F0F   85 C4                    sta PLJ
  772   2F11   4C CB 2F         guyjump: jmp guyj    ;Then process jump
  773                           
  774   2F14   A5 C4            guymove: lda PLJ     ;Are we jumping?
  775   2F16   D0 F9                    bne guyjump  ;Then process jump
  776   2F18   A5 C2                    lda PLF      ;Are we falling?
  777   2F1A   D0 B7                    bne guyfall  ;Then process fall
  778   2F1C   A5 C0                    lda PLX      ;Get player position
  779   2F1E   4A                       lsr a         ;Shift down to block numbers
  780   2F1F   4A                       lsr a
  781   2F20   4A                       lsr a
  782   2F21   AA                       tax
  783   2F22   8E 40 03                 stx $340     ;And store
  784   2F25   A5 C1                    lda PLY
  785   2F27   18                       clc
  786   2F28   69 10                    adc #16      ;+16 - the block immediately under the player's feet
  787   2F2A   4A                       lsr a
  788   2F2B   4A                       lsr a
  789   2F2C   4A                       lsr a
  790   2F2D   A8                       tay
  791   2F2E   8C 41 03                 sty $341
  792   2F31   20 67 30                 jsr getblk   ;Check blocks immediately under player
  793   2F34   F0 BC                    beq stfall   ;If it's just air then start falling
  794                           
  795   2F36   A9 00                    lda #0
  796   2F38   85 0F                    sta $f
  797   2F3A                            
  798                                   ;Get Z and X keys
  799                           ;        lda #$81
  800                           ;        ldx #$9E ;'Z'
  801                           ;        ldy #255
  802                           ;       jsr OSBYTE ;If we get them now then player can't change direction during jump
  803                           ;       cpx #255
  804   2F3A   20 71 FE                 jsr SCANKEY
  805   2F3D   C0 3A                    cpy #$3a  ; 'Z'        
  806   2F3F   D0 04                    bne l5
  807   2F41   A9 01                    lda #1
  808   2F43   85 0F                    sta $f    ;Store for later
  809                           
  810   2F45                    l5
  811                           ;        lda #$81
  812                           ;        ldx #$BD ;'X'
  813                           ;        ldy #255
  814                           ;        jsr OSBYTE
  815                           ;        cpx #255
  816   2F45   20 71 FE                 jsr SCANKEY
  817   2F48   C0 38                    cpy #$38 ; 'X'
  818   2F4A   D0 06                    bne l6
  819   2F4C   A5 0F                    lda $f
  820   2F4E   09 02                    ora #2
  821   2F50   85 0F                    sta $f
  822   2F52                            
  823   2F52                    l6      
  824                           ;        lda #$81
  825                           ;        ldx #$B6     ;Check RETURN key
  826                           ;        ldy #255
  827                           ;        jsr OSBYTE
  828                           ;        cpx #255
  829   2F52   AD 01 B0                 lda $b001
  830   2F55   29 80                    and #$80 ;'SHIFT'
  831   2F57   F0 B4                    beq startj  ;Start jumping if RETURN down
  832   2F59                            
  833   2F59   A5 0F            chkdir: lda $f
  834   2F5B   29 01                    and #1 ;'Z'
  835   2F5D   D0 07                    bne guyleft ;Move left if Z held down
  836   2F5F                            
  837   2F5F   A5 0F                    lda $f
  838   2F61   29 02                    and #2 ;'X'
  839   2F63   D0 32                    bne guyright ;Move right if X held down
  840                           
  841   2F65   60                       rts
  842                           
  843   2F66   C6 C0            guyleft: dec PLX   ;Move player left
  844   2F68   C6 C0                    dec PLX
  845   2F6A   A9 01                    lda #1     ;Set direction to left (so player faces that direction)
  846   2F6C   85 C3                    sta PLD
  847   2F6E   A5 C0                    lda PLX    ;Shift coordinates down again
  848   2F70   4A                       lsr a
  849   2F71   4A                       lsr a
  850   2F72   4A                       lsr a
  851   2F73   AA                       tax
  852   2F74   A5 C1                    lda PLY
  853   2F76   4A                       lsr a
  854   2F77   4A                       lsr a
  855   2F78   4A                       lsr a
  856   2F79   A8                       tay
  857   2F7A   86 70                    stx $70     ;We now check blocks immediately to the left of player 
  858   2F7C   84 71                    sty $71     ;to see if player could actually move that direction
  859   2F7E   20 7E 30                 jsr getblk1 ;Check just one block
  860   2F81   C9 02                    cmp #2      ;If it's a wall
  861   2F83   F0 0D                    beq noleft  ;Then jump to move player back again
  862   2F85   A6 70                    ldx $70     ;Also check block below the one we just checked
  863   2F87   A4 71                    ldy $71
  864   2F89   C8                       iny
  865   2F8A   20 7E 30                 jsr getblk1
  866   2F8D   C9 02                    cmp #2
  867   2F8F   F0 01                    beq noleft
  868   2F91   60                       rts
  869                           
  870   2F92   E6 C0            noleft:  inc PLX
  871   2F94   E6 C0                    inc PLX
  872   2F96   60                       rts
  873                           
  874   2F97   E6 C0            guyright: inc PLX   ;Much the same as above, just right instead of left!
  875   2F99   E6 C0                    inc PLX
  876   2F9B   A9 00                    lda #0
  877   2F9D   85 C3                    sta PLD
  878   2F9F   A5 C0                    lda PLX
  879   2FA1   18                       clc         ;Player coordinates are the left half of the player, so
  880   2FA2   69 08                    adc #8      ;we need add a block to get the block at his right      
  881   2FA4   4A                       lsr a
  882   2FA5   4A                       lsr a
  883   2FA6   4A                       lsr a
  884   2FA7   AA                       tax
  885   2FA8   A5 C1                    lda PLY
  886   2FAA   4A                       lsr a
  887   2FAB   4A                       lsr a
  888   2FAC   4A                       lsr a
  889   2FAD   A8                       tay
  890   2FAE   86 70                    stx $70
  891   2FB0   84 71                    sty $71
  892   2FB2   20 7E 30                 jsr getblk1
  893   2FB5   C9 02                    cmp #2
  894   2FB7   F0 0D                    beq noright
  895   2FB9   A6 70                    ldx $70
  896   2FBB   A4 71                    ldy $71
  897   2FBD   C8                       iny
  898   2FBE   20 7E 30                 jsr getblk1
  899   2FC1   C9 02                    cmp #2
  900   2FC3   F0 01                    beq noright
  901   2FC5   60                       rts
  902                           
  903   2FC6   C6 C0            noright: dec PLX
  904   2FC8   C6 C0                    dec PLX
  905   2FCA   60                       rts
  906                           
  907                           ;stopj4:  jmp stopj5  ;Branch instructions on 6502 are annoyingly limited
  908                           ;Handle jumping
  909   2FCB   A5 C1            guyj:    lda PLY
  910   2FCD   38                       sec          ;Subtract PLJ from PLY to move player up/down
  911   2FCE   E5 C4                    sbc PLJ      ;(PLJ can be negative, which is how the player moves down again)
  912   2FD0   85 C1                    sta PLY
  913   2FD2   A6 C4                    ldx PLJ      ;Update PLJ
  914   2FD4   CA                       dex
  915   2FD5   D0 01                    bne ndecj    ;Skip over 0, as PLJ=0 means not jumping!
  916   2FD7   CA                       dex          ;move straight to -1 instead
  917   2FD8   86 C4            ndecj:   stx PLJ
  918   2FDA   E0 F7                    cpx #$F7     ;Have we reached -8?
  919   2FDC   F0 61                    beq stopj    ;Then stop jumping (player will probably start falling)
  920                           ;        lda PLY      
  921                           ;        cmp #200     ;Make sure player doesn't move off top or bottom of screen
  922                           ;        bcs stopj4   ;Stop jump in that case
  923   2FDE   20 59 2F                 jsr chkdir   ;Keep player moving left/right
  924   2FE1   A5 C4                    lda PLJ      ;Need to check if we hit ceiling/floor
  925   2FE3   10 15                    bpl chkc     ;Check jump sign to see which
  926                           ;Check floor
  927   2FE5   A5 C0                    lda PLX      ;For floor we check immediately underneath player
  928   2FE7   4A                       lsr a
  929   2FE8   4A                       lsr a
  930   2FE9   4A                       lsr a
  931   2FEA   AA                       tax
  932   2FEB   A5 C1                    lda PLY
  933   2FED   18                       clc
  934   2FEE   69 17                    adc #16+7
  935   2FF0   4A                       lsr a
  936   2FF1   4A                       lsr a
  937   2FF2   4A                       lsr a
  938   2FF3   A8                       tay
  939   2FF4   20 67 30                 jsr getblk
  940   2FF7   D0 25                    bne stopj2
  941   2FF9   60                       rts
  942                           ;Check ceiling
  943   2FFA   A5 C0            chkc:   lda PLX     ;For ceiling we check immediately above
  944   2FFC   4A                       lsr a
  945   2FFD   4A                       lsr a
  946   2FFE   4A                       lsr a
  947   2FFF   AA                       tax
  948                           
  949   3000   A5 C1                    lda PLY
  950   3002   4A                       lsr a
  951   3003   4A                       lsr a
  952   3004   4A                       lsr a
  953   3005   A8                       tay
  954   3006   86 70                    stx $70
  955   3008   84 71                    sty $71
  956   300A   20 7E 30                 jsr getblk1
  957   300D   C9 02                    cmp #2
  958   300F   F0 3A                    beq stopj3
  959   3011   A6 70                    ldx $70
  960   3013   E8                       inx
  961   3014   A4 71                    ldy $71
  962   3016   20 7E 30                 jsr getblk1
  963   3019   C9 02                    cmp #2
  964   301B   F0 2E                    beq stopj3
  965   301D   60                       rts
  966                           
  967   301E   A5 C1            stopj2: lda PLY      ;Stop jumping if we've hit floor
  968   3020   29 F8                    and #$F8     ;Update player Y so he's immediately above the floor
  969   3022   85 C1                    sta PLY      ;(he could be partway through)
  970   3024   A5 C0                    lda PLX
  971   3026   4A                       lsr a
  972   3027   4A                       lsr a
  973   3028   4A                       lsr a
  974   3029   AA                       tax
  975   302A   A5 C1                    lda PLY
  976   302C   18                       clc
  977   302D   69 17                    adc #16+7
  978   302F   4A                       lsr a
  979   3030   4A                       lsr a
  980   3031   4A                       lsr a
  981   3032   A8                       tay
  982   3033   20 67 30                 jsr getblk  ;Not sure why we need to check this, I'm loathe to change it
  983   3036   D0 07                    bne stopj
  984   3038   A5 C1                    lda PLY
  985   303A   18                       clc
  986   303B   69 04                    adc #4
  987   303D   85 C1                    sta PLY
  988   303F   A9 00            stopj:  lda #0     ;Clear PLJ flag
  989   3041   85 C4                    sta PLJ
  990   3043   60                       rts
  991                           
  992   3044   A9 00            stopj5: lda #0     ;Stop jumping if hit the top of the screen
  993   3046   85 C1                    sta PLY     ;Limit player to 0
  994   3048   4C 3F 30                 jmp stopj
  995                           
  996   304B   E6 C4            stopj3: inc PLJ    ;Stop jumping if we hit ceiling
  997   304D   A5 C1                    lda PLY
  998   304F   18                       clc
  999   3050   65 C4                    adc PLJ
 1000   3052   29 F8                    and #$F8    ;Make sure player isn't partway through the ceiling
 1001   3054   85 C1                    sta PLY
 1002   3056   4C 3F 30                 jmp stopj
 1003                           
 1004   3059   A9 00            blkzero: lda #0 ;Used if player jumps off the top of the screen
 1005   305B   E0 00                    cpx #0
 1006   305D   F0 05                    beq l7
 1007   305F   E0 1F                    cpx #31
 1008   3061   F0 01                    beq l7
 1009   3063   60                       rts     ;just returns empty air
 1010                           
 1011   3064   A9 02            l7      lda #2 ;But return a brick wall if about to jump off the edge
 1012   3066   60                       rts
 1013   3067                                    
 1014                           ;Return block number at block X,Y
 1015   3067   C0 14            getblk: cpy #20
 1016   3069   B0 EE                    bcs blkzero
 1017   306B   86 82                    stx TMPVAR+2 ;Actually this returns the block at X,Y ORed with X+1,Y 
 1018   306D   84 83                    sty TMPVAR+3  ;This is needed for ceiling/floor calculations
 1019   306F   A9 00                    lda #0 ;as player is 2 blocks wide
 1020                           
 1021   3071   20 06 33                 jsr savespc
 1022                           
 1023   3074   A4 82                    ldy TMPVAR+2
 1024   3076   B1 83                    lda (TMPVAR+3),y
 1025   3078   C8                       iny
 1026   3079   11 83                    ora (TMPVAR+3),y
 1027   307B   29 7F                    and #$7f
 1028   307D   60                       rts
 1029                           
 1030                           ;Return block number at block X,Y
 1031   307E   C0 14            getblk1: cpy #20
 1032   3080   B0 D7                    bcs blkzero 
 1033   3082   86 82                    stx TMPVAR+2   ;This only checks 1 block
 1034   3084   84 83                    sty TMPVAR+3    ;But also checks for keys/exit at the same time
 1035   3086   86 70                    stx $70
 1036   3088   84 72                    sty $72
 1037   308A   A9 00                    lda #0
 1038                           
 1039   308C   20 06 33                 jsr savespc
 1040                           
 1041   308F   A4 82                    ldy TMPVAR+2
 1042   3091   B1 83                    lda (TMPVAR+3),y
 1043   3093   30 08                    bmi gotkey ;If block number is negative then it's either key or door
 1044   3095                           
 1045   3095   60                       rts
 1046                           
 1047   3096   A9 01            setlo:  lda #1       ;Set level over flag
 1048   3098   85 D4                    sta LEVELOVR
 1049   309A   A9 00                    lda #0       ;Then return 0, for empty air
 1050   309C   60                       rts
 1051   309D                            
 1052   309D   A5 C5            gotkey: lda KEYSLEFT ;Do we have any keys left?
 1053   309F   F0 F5                    beq setlo    ;If not then it's a door - set level over
 1054   30A1   A9 00                    lda #0       ;Else it's a key - remove it from the map
 1055   30A3   91 83                    sta (TMPVAR+3),y
 1056   30A5                            
 1057   30A5   85 71                    sta $71      ;Remove it from the screen as well
 1058                           
 1059   30A7   A5 70                    lda $70      ;This is just a repeat of the plotting code
 1060   30A9   85 86                    sta TMPVAR+6
 1061   30AB   A5 72                    lda $72
 1062   30AD   18                       clc
 1063   30AE   69 80                    adc #$80
 1064   30B0   85 87                    sta TMPVAR+7
 1065   30B2                             
 1066   30B2   A0 00                    ldy #0
 1067   30B4   A2 00                    ldx #0       ;Copy key graphic (was a sprite on C64) onto screen
 1068   30B6   BD 44 3A         l8      lda keyspr,x
 1069   30B9   51 86                    eor (TMPVAR+6),y
 1070   30BB   91 86                    sta (TMPVAR+6),y
 1071   30BD   E8                       inx
 1072   30BE   98                       tya
 1073   30BF   18                       clc
 1074   30C0   69 20                    adc #$20
 1075   30C2   A8                       tay
 1076   30C3   D0 F1                    bne l8 
 1077                           
 1078   30C5   C6 C5                    dec KEYSLEFT  ;Decrease the key count
 1079   30C7   F0 03                    beq mkexit2   ;If that's the last key then put the door in place        
 1080   30C9                            
 1081   30C9   A9 00                    lda #0        ;Return empty air
 1082   30CB   60                       rts
 1083   30CC                            
 1084   30CC   20 05 2D         mkexit2: jsr makexit  ;Put exit on screen
 1085   30CF   A9 00                    lda #0        ;Return empty air
 1086   30D1   60                       rts
 1087   30D2                            
 1088                           
 1089                           
 1090                           
 1091                           ;Drawsprite routine
 1092                           ; A=spritenummer
 1093                           ;  x&7=0/1 -> subsprite 0
 1094                           ;  x&7=2/3 -> subsprite 1
 1095                           ;  x&7=4/5 -> subsprite 2
 1096                           ;  x&7=6/7 -> subsprite 3
 1097                           ;
 1098                           ;A=sprite num, X=X, Y=Y
 1099                           ; Spritedata    = $a/b
 1100                           ; Screenrowcount= $5
 1101                           ; Screenoffset  = $6/7
 1102                           ; Screenaddress = $8/9
 1103                           
 1104   30D2                    drawspr:
 1105   30D2   85 82                    sta TMPVAR+2
 1106   30D4   86 83                    stx TMPVAR+3
 1107   30D6   84 84                    sty TMPVAR+4
 1108                           
 1109                           ;Screen base spriteaddress = $8000 + y*$100 + X
 1110                           ;Calculate screenaddress $6/7
 1111   30D8   A5 83                    lda TMPVAR+3 
 1112   30DA   4A                       lsr a
 1113   30DB   4A                       lsr a
 1114   30DC   4A                       lsr a
 1115   30DD   85 86                    sta TMPVAR+6
 1116   30DF   A9 80                    lda #$80
 1117   30E1   85 87                    sta TMPVAR+7
 1118                           
 1119                           ;Set spriteline counter
 1120   30E3   98                       tya
 1121   30E4   AA                       tax
 1122   30E5   A9 0F                    lda #15
 1123   30E7   85 85                    sta TMPVAR+5
 1124                           
 1125                           ;Base spriteaddress = sprites + nr*128
 1126   30E9   A5 82                    lda TMPVAR+2         ;Get sprite start
 1127   30EB   85 8C                    sta TMPVAR+$C
 1128   30ED   A9 00                    lda #0
 1129   30EF   85 8D                    sta TMPVAR+$D
 1130   30F1   06 8C                    asl TMPVAR+$C       ;x2 - max 8
 1131   30F3   06 8C                    asl TMPVAR+$C       ;x4 - max 16
 1132   30F5   06 8C                    asl TMPVAR+$C       ;x8 - max 32
 1133   30F7   06 8C                    asl TMPVAR+$C       ;x16 - max 64
 1134   30F9   06 8C                    asl TMPVAR+$C       ;x32 - max 128
 1135   30FB   06 8C                    asl TMPVAR+$C       ;x64 - max 256
 1136   30FD   26 8D                    rol TMPVAR+$D
 1137   30FF   06 8C                    asl TMPVAR+$C       ;x128 - max 512
 1138   3101   26 8D                    rol TMPVAR+$D
 1139                           
 1140   3103   A5 8C                    lda TMPVAR+$C        ;Get full sprite address
 1141   3105   18                       clc
 1142   3106   69 24                    adc #<sprites
 1143   3108   85 8A                    sta TMPVAR+$A         ;And put in $A/$B
 1144   310A   A5 8D                    lda TMPVAR+$D
 1145   310C   69 38                    adc #>sprites
 1146   310E   85 8B                    sta TMPVAR+$B
 1147                           
 1148                           ;Add x%6 *32 to get subsprite
 1149   3110   A5 83                    lda TMPVAR+3         ;Sprites are preshifted, 4 based on X position
 1150   3112   29 06                    and #6        ;so get index to correct one
 1151   3114   0A                       asl a
 1152   3115   0A                       asl a
 1153   3116   0A                       asl a
 1154   3117   0A                       asl a
 1155   3118   18                       clc
 1156   3119   65 8A                    adc TMPVAR+$A
 1157   311B   85 8A                    sta TMPVAR+$A
 1158   311D   A5 8B                    lda TMPVAR+$B
 1159   311F   69 00                    adc #0
 1160   3121   85 8B                    sta TMPVAR+$B
 1161                           
 1162   3123   A5 C7                    lda CHKCOL   ;Do we need to check collisions?
 1163   3125   D0 35                    bne spryl2   ;Yes, then jump to collision detecting loop
 1164                           
 1165   3127                    spryl:
 1166   3127   E0 C8                    cpx #200     ;Don't draw row if it's off the screen 
 1167   3129   B0 1E                    bcs skipdraw1
 1168                           
 1169   312B   BD E4 35                 lda ytab1,x  ;Otherwise normal loop
 1170   312E   18                       clc          ;Get address through Y tables
 1171   312F   65 86                    adc TMPVAR+6
 1172   3131   85 88                    sta TMPVAR+8
 1173   3133   BD 84 36                 lda ytab2,x
 1174   3136   65 87                    adc TMPVAR+7
 1175   3138   85 89                    sta TMPVAR+9
 1176                           
 1177   313A   A0 00                    ldy #0
 1178   313C   B1 8A                    lda (TMPVAR+$a),y   ;Get sprite data
 1179   313E   51 88                    eor (TMPVAR+$8),y   ;EOR with what's on screen
 1180   3140   91 88                    sta (TMPVAR+$8),y   ;And story
 1181   3142   C8                       iny
 1182   3143   B1 8A                    lda (TMPVAR+$a),y   ;Get second byte of sprite data for this row
 1183   3145   51 88                    eor (TMPVAR+$8),y   ;and EOR and store
 1184   3147   91 88                    sta (TMPVAR+$8),y
 1185                           
 1186   3149                    skipdraw1:
 1187   3149   A5 8A                    lda TMPVAR+$a       ;Update sprite address
 1188   314B   18                       clc
 1189   314C   69 02                    adc #2
 1190   314E   85 8A                    sta TMPVAR+$a
 1191   3150   A5 8B                    lda TMPVAR+$b
 1192   3152   69 00                    adc #0
 1193   3154   85 8B                    sta TMPVAR+$b
 1194   3156   E8                       inx
 1195   3157   C6 85                    dec TMPVAR+5       ;Decrease row count
 1196   3159   10 CC                    bpl spryl   ;And loop
 1197                           
 1198   315B   60                       rts
 1199                           
 1200   315C   E0 C8            spryl2: cpx #200     ;Don't draw row if it's off the screen 
 1201   315E   B0 2A                    bcs skipdraw2
 1202   3160   BD E4 35                 lda ytab1,x ;Get address through Y table
 1203   3163   18                       clc
 1204   3164   65 86                    adc TMPVAR+6
 1205   3166   85 88                    sta TMPVAR+8
 1206   3168   BD 84 36                 lda ytab2,x
 1207   316B   65 87                    adc TMPVAR+7
 1208   316D   85 89                    sta TMPVAR+9
 1209                           
 1210   316F   A0 00                    ldy #0
 1211                           
 1212   3171   B1 8A                    lda (TMPVAR+$a),y  ;Get sprite data
 1213   3173   31 88                    and (TMPVAR+$8),y  ;AND with screen data
 1214   3175   D0 26                    bne coll    ;Jump if not 0 (if not 0 then collision!)
 1215   3177                    donecol:
 1216   3177   B1 8A                    lda (TMPVAR+$a),y ;Plot as normal
 1217   3179   51 88                    eor (TMPVAR+$8),y
 1218   317B   91 88                    sta (TMPVAR+$8),y
 1219   317D   C8                       iny
 1220                           
 1221   317E   B1 8A                    lda (TMPVAR+$a),y  ;Collision again
 1222   3180   31 88                    and (TMPVAR+$8),y
 1223   3182   D0 20                    bne coll2
 1224                           
 1225   3184   B1 8A            doncol: lda (TMPVAR+$a),y  ;And plot again
 1226   3186   51 88                    eor (TMPVAR+$8),y
 1227   3188   91 88                    sta (TMPVAR+$8),y
 1228   318A                    skipdraw2:
 1229   318A   A5 8A                    lda TMPVAR+$a      ;Update address
 1230   318C   18                       clc
 1231   318D   69 02                    adc #2
 1232   318F   85 8A                    sta TMPVAR+$a
 1233   3191   A5 8B                    lda TMPVAR+$b
 1234   3193   69 00                    adc #0
 1235   3195   85 8B                    sta TMPVAR+$b
 1236   3197   E8                       inx
 1237   3198   C6 85                    dec TMPVAR+5
 1238   319A   10 C0                    bpl spryl2
 1239                           
 1240   319C   60                       rts
 1241                           
 1242   319D   A9 01            coll:   lda #1      ;Set collision flag
 1243   319F   85 C6                    sta COLLIDE
 1244   31A1   4C 77 31                 jmp donecol
 1245                           
 1246   31A4   A9 01            coll2:  lda #1      ;Two of these loops, so it can continue at the right point
 1247   31A6   85 C6                    sta COLLIDE
 1248   31A8   4C 84 31                 jmp doncol
 1249                           
 1250                           
 1251                           
 1252   31AB   86 86            dolh:   stx TMPVAR+6          ;Copy level header pointed to by X/Y
 1253   31AD   84 87                    sty TMPVAR+7          ;to levhead
 1254   31AF   A9 5C                    lda #<levhead
 1255   31B1   85 84                    sta TMPVAR+4
 1256   31B3   A9 3A                    lda #>levhead
 1257   31B5   85 85                    sta TMPVAR+5
 1258   31B7   A0 00                    ldy #0
 1259   31B9   B1 86            headl:  lda (TMPVAR+6),y
 1260   31BB   91 84                    sta (TMPVAR+4),y
 1261   31BD   C8                       iny
 1262   31BE   C0 1E                    cpy #30        ;It's 30 bytes
 1263   31C0   D0 F7                    bne headl
 1264   31C2   60                       rts
 1265   31C3                            
 1266                           ;Level decompression
 1267   31C3   A9 44            decomp: lda #<lev1     ;Get normal level address
 1268   31C5   85 84                    sta TMPVAR+4
 1269   31C7   A9 33                    lda #>lev1
 1270   31C9   85 85                    sta TMPVAR+5
 1271   31CB   86 86                    stx TMPVAR+6          ;Store compressed level address (X/Y)
 1272   31CD   84 87                    sty TMPVAR+7
 1273   31CF   A0 00                    ldy #0
 1274                           
 1275   31D1   B1 86            deloop: lda (TMPVAR+6),y      ;Get next byte
 1276   31D3   C9 FF                    cmp #$ff       ;If $FF then end of level data
 1277   31D5   F0 1E                    beq deend
 1278   31D7   85 88                    sta TMPVAR+8        ;Save
 1279   31D9   4A                       lsr a
 1280   31DA   4A                       lsr a
 1281   31DB   AA                       tax            ;Get run length number (top 6 bits)
 1282   31DC   A5 88                    lda TMPVAR+8
 1283   31DE   29 03                    and #3         ;Get tile number
 1284   31E0                            
 1285   31E0   E6 86                    inc TMPVAR+6          ;Increase source address
 1286   31E2   D0 02                    bne nodinc2
 1287   31E4   E6 87                    inc TMPVAR+7
 1288   31E6   EA               nodinc2: nop
 1289   31E7   91 84            dewloop: sta (TMPVAR+4),y     ;Store tile
 1290   31E9   E6 84                    inc TMPVAR+4          ;Increase dest address
 1291   31EB   D0 02                    bne nodeinc
 1292   31ED   E6 85                    inc TMPVAR+5
 1293   31EF   CA               nodeinc: dex           ;Decrease run length count
 1294   31F0   D0 F5                    bne dewloop    ;and loop
 1295   31F2   4C D1 31                 jmp deloop     ;Byte over - jump to start of loop
 1296                           
 1297   31F5   60               deend:  rts
 1298                           
 1299                           ;Make status display (why did I call it 'display bottom'?)
 1300   31F6                    mkdispb:
 1301   31F6   A9 00                    lda #<$9600
 1302   31F8   85 D8                    sta tmp
 1303   31FA   A9 96                    lda #>$9600
 1304   31FC   85 D9                    sta tmp+1
 1305   31FE   A0 00                    ldy #0
 1306   3200   A2 00                    ldx #0
 1307   3202                    mkdbl:
 1308   3202   BD 7C 37                 lda dispbot,x ;Copy 'LIVES' text
 1309   3205   91 D8                    sta (tmp),y
 1310   3207   98                       tya
 1311   3208   18                       clc
 1312   3209   69 20                    adc #$20
 1313   320B   A8                       tay
 1314   320C   D0 02                    bne noinc2
 1315   320E   E6 D8                    inc tmp
 1316   3210                    noinc2:
 1317   3210   E8                       inx
 1318   3211   E0 30                    cpx #48
 1319   3213   D0 ED                    bne mkdbl
 1320                           
 1321   3215   A9 0D                    lda #<$960d
 1322   3217   85 D8                    sta tmp
 1323   3219   A9 96                    lda #>$960d
 1324   321B   85 D9                    sta tmp+1
 1325   321D   A0 00                    ldy #0
 1326   321F   A2 00                    ldx #0
 1327   3221                    mkdbl3:
 1328   3221   BD AC 37                 lda timedb,x  ;Copy 'TIME' text
 1329   3224   91 D8                    sta (tmp),y
 1330   3226   98                       tya
 1331   3227   18                       clc
 1332   3228   69 20                    adc #$20
 1333   322A   A8                       tay
 1334   322B   D0 02                    bne noinc3
 1335   322D   E6 D8                    inc tmp
 1336   322F                    noinc3:
 1337   322F   E8                       inx
 1338   3230   E0 28                    cpx #40
 1339   3232   D0 ED                    bne mkdbl3
 1340                           
 1341   3234   A9 10                    lda #$10
 1342   3236   A2 00                    ldx #0
 1343   3238   60                       rts
 1344                           
 1345                           ;enddat:  .BYTE $A,$D,$C,$D,$A,$E,$F,$FF
 1346                           
 1347                           
 1348                           
 1349                           ;Draw a number on the status bar
 1350   3239                    dodbnum:
 1351   3239   0A                       asl a ;Multiply number by 8
 1352   323A   0A                       asl a
 1353   323B   0A                       asl a
 1354   323C   18                       clc   ;for character address lookup
 1355   323D   69 2C                    adc #<livenum
 1356   323F   85 84                    sta TMPVAR+4
 1357   3241   A9 37                    lda #>livenum
 1358   3243   69 00                    adc #0
 1359   3245   85 85                    sta TMPVAR+5 ;Character source now in 4/5
 1360                           
 1361   3247   A2 00                    ldx #0
 1362   3249   A0 00                    ldy #0
 1363   324B                    updbl1:
 1364   324B   B1 84                    lda (TMPVAR+4),y  ;Copy character across
 1365   324D   91 88                    sta (TMPVAR+8),y
 1366   324F   E6 84                    inc TMPVAR+4
 1367   3251   A5 84                    lda TMPVAR+4
 1368   3253   D0 02                    bne goon1
 1369   3255   E6 85                    inc TMPVAR+5
 1370   3257                    goon1:
 1371   3257   A5 88                    lda TMPVAR+8
 1372   3259   18                       clc
 1373   325A   69 20                    adc #$20
 1374   325C   85 88                    sta TMPVAR+8
 1375   325E   A5 89                    lda TMPVAR+9
 1376   3260   69 00                    adc #0
 1377   3262   85 89                    sta TMPVAR+9
 1378   3264   E8                       inx
 1379   3265   E0 08                    cpx #8      ;8 bytes
 1380   3267   D0 E2                    bne updbl1
 1381   3269   60                       rts
 1382                           
 1383                           ;Update status bar
 1384   326A   A5 CB            updb:   lda LIVES  ;Lives first (1 digit only)
 1385   326C   A2 96                    ldx #$96   ;Store screen address ($7A90)
 1386   326E   86 89                    stx TMPVAR+$9
 1387   3270   A2 06                    ldx #$06
 1388   3272   86 88                    stx TMPVAR+$8
 1389   3274   20 39 32                 jsr dodbnum ;And display number
 1390                           
 1391   3277   A5 D5                    lda TIME   ;First (last on the display) digit of time
 1392   3279   29 0F                    and #$f
 1393   327B   A2 96                    ldx #$96   ;Address is $7B20
 1394   327D   86 89                    stx TMPVAR+$9
 1395   327F   A2 14                    ldx #$14
 1396   3281   86 88                    stx TMPVAR+$8
 1397   3283   20 39 32                 jsr dodbnum ;And display
 1398                           
 1399   3286   A5 D5                    lda TIME   ;Middle digit now
 1400   3288   4A                       lsr  a      ;Shift to get it
 1401   3289   4A                       lsr a
 1402   328A   4A                       lsr a
 1403   328B   4A                       lsr a
 1404   328C   A2 96                    ldx #$96   ;Address is $7B18 
 1405   328E   86 89                    stx TMPVAR+$9
 1406   3290   A2 13                    ldx #$13
 1407   3292   86 88                    stx TMPVAR+$8
 1408   3294   20 39 32                 jsr dodbnum ;And display
 1409                           
 1410   3297   A5 D6                    lda TIME+1 ;And finally last digit (first on display)
 1411   3299   29 0F                    and #$f
 1412   329B   A2 96                    ldx #$96   ;Address is $7B10
 1413   329D   86 89                    stx TMPVAR+$9
 1414   329F   A2 12                    ldx #$12
 1415   32A1   86 88                    stx TMPVAR+$8
 1416   32A3   20 39 32                 jsr dodbnum ;And display
 1417                           
 1418   32A6   A5 CC                    lda LCOMP  ;Now level number
 1419   32A8   F8                       sed        ;Add 1, so level numbers aren't 0 based anymore
 1420   32A9   18                       clc
 1421   32AA   69 01                    adc #1
 1422   32AC   D8                       cld
 1423   32AD   29 0F                    and #$f
 1424   32AF   A2 96                    ldx #$96   ;Address $7B58
 1425   32B1   86 89                    stx TMPVAR+$9
 1426   32B3   A2 1F                    ldx #$1f
 1427   32B5   86 88                    stx TMPVAR+$8
 1428   32B7   20 39 32                 jsr dodbnum ;And display
 1429                           
 1430   32BA   A5 CC                    lda LCOMP  ;Other digit (you decide if it's first or last)
 1431   32BC   F8                       sed        ;Add 1, so level numbers aren't 0 based anymore
 1432   32BD   18                       clc
 1433   32BE   69 01                    adc #1
 1434   32C0   D8                       cld
 1435   32C1   4A                       lsr a
 1436   32C2   4A                       lsr a
 1437   32C3   4A                       lsr a
 1438   32C4   4A                       lsr a
 1439   32C5   A2 96                    ldx #$96  ;Address $7B50   
 1440   32C7   86 89                    stx TMPVAR+$9
 1441   32C9   A2 1E                    ldx #$1e
 1442   32CB   86 88                    stx TMPVAR+$8
 1443   32CD   20 39 32                 jsr dodbnum ;And display
 1444                           
 1445   32D0   60                       rts 
 1446                           
 1447   32D1   F8               uptime: sed         ;Update time - use BCD decimal mode
 1448   32D2   A5 D5                    lda TIME
 1449   32D4   38                       sec
 1450   32D5   E9 01                    sbc #1      ;Subtract 1 from time
 1451   32D7   85 D5                    sta TIME
 1452   32D9   A5 D6                    lda TIME+1  ;Then update second byte
 1453   32DB   E9 00                    sbc #0
 1454   32DD   85 D6                    sta TIME+1
 1455   32DF   D8                       cld
 1456   32E0   A5 D5                    lda TIME    ;Is time = 000?
 1457   32E2   05 D6                    ora TIME+1
 1458   32E4   F0 01                    beq timeup  ;Then time's up so kill the player
 1459   32E6   60                       rts
 1460                           
 1461   32E7   4C DB 2C         timeup: jmp die
 1462                           
 1463   32EA                    clear:  
 1464   32EA   A9 D0                    lda #$D0  ; Clear4 color
 1465   32EC   8D 00 B0                 sta $B000
 1466                           
 1467   32EF   A9 80                    lda #$80
 1468   32F1   85 D9                    sta tmp+1
 1469   32F3   A9 00                    lda #0       ;Clear the screen - this is _not_ small
 1470   32F5   85 D8                    sta tmp
 1471   32F7   A8                       tay
 1472   32F8                    clrloop:
 1473   32F8   91 D8                    sta (tmp),y
 1474   32FA   C8                       iny
 1475   32FB   D0 FB                    bne clrloop
 1476   32FD   E6 D9                    inc tmp+1
 1477   32FF   A6 D9                    ldx tmp+1
 1478   3301   E0 98                    cpx #$98
 1479   3303   D0 F3                    bne clrloop
 1480                           
 1481   3305   60                       rts
 1482                           
 1483   3306                    savespc:
 1484   3306   85 84                    sta TMPVAR+4
 1485   3308   06 83                    asl TMPVAR+3    ;x2 - max 40
 1486   330A   06 83                    asl TMPVAR+3    ;x4 - max 80
 1487   330C   06 83                    asl TMPVAR+3    ;x8 - max 160
 1488   330E   06 83                    asl TMPVAR+3    ;x16 - max 320
 1489   3310   26 84                    rol TMPVAR+4
 1490   3312   06 83                    asl TMPVAR+3    ;x32 - max 640
 1491   3314   26 84                    rol TMPVAR+4
 1492   3316   A5 83                    lda TMPVAR+3
 1493   3318   18                       clc
 1494   3319   69 44                    adc #<lev1
 1495   331B   85 83                    sta TMPVAR+3
 1496   331D   A5 84                    lda TMPVAR+4
 1497   331F   69 33                    adc #>lev1
 1498   3321   85 84                    sta TMPVAR+4
 1499   3323   60                       rts
 1500                           
 1501                           ;Our event handler. This looks for vsync and increments the VSYNCCNT
 1502   3324   C9 04            eventh: cmp #4 ;is this vsync?
 1503   3326   D0 02                    bne l9  ;jump if isn't
 1504   3328   E6 CF                    inc VSYNCCNT ;increment VSYNCCNT
 1505   332A                    l9
 1506   332A   60                       rts ; end of game
 1507                           
 1508   332B   00 00 00 00 00   ENMY:   .db 0,0,0,0,0
 1509   3330   00 00 00 00 00           .db 0,0,0,0,0
 1510   3335   00 00 00 00 00           .db 0,0,0,0,0
 1511   333A   00 00 00 00 00           .db 0,0,0,0,0
 1512   333F   00 00 00 00 00           .db 0,0,0,0,0
 1513                           
 1514   3344                    lev1:
 1515   3344                            .blkb 640
 1516                           
 1517                           
 1518   35C4                                   include mtiles.inc
 1519                           ;MONOCHROME VERSION
 1520                           
 1521   35C4                    tiles:
 1522   35C4   00                       .BYTE %00000000      ;Tiles - all 8x8 1 bit per pixel, so easy to change!
 1523   35C5   00                       .BYTE %00000000      ;This one is air
 1524   35C6   00                       .BYTE %00000000
 1525   35C7   00                       .BYTE %00000000
 1526   35C8   00                       .BYTE %00000000
 1527   35C9   00                       .BYTE %00000000
 1528   35CA   00                       .BYTE %00000000
 1529   35CB   00                       .BYTE %00000000
 1530                           
 1531                           ;        .BYTE %11000011      ;Floor that can be walked and jumped through
 1532                           ;        .BYTE %01100110
 1533                           ;        .BYTE %00111100
 1534                           ;        .BYTE %01100110
 1535                           ;        .BYTE %00000000
 1536                           ;        .BYTE %10011001
 1537                           ;        .BYTE %11111111
 1538                           ;        .BYTE %00000000
 1539                           
 1540   35CC   FF                       .BYTE %11111111      ;Floor that can be walked and jumped through
 1541   35CD   AB                       .BYTE %10101011
 1542   35CE   D5                       .BYTE %11010101
 1543   35CF   AB                       .BYTE %10101011
 1544   35D0   D5                       .BYTE %11010101
 1545   35D1   AB                       .BYTE %10101011
 1546   35D2   D5                       .BYTE %11010101
 1547   35D3   FF                       .BYTE %11111111
 1548                           
 1549   35D4   EE                       .BYTE %11101110      ;Brick wall
 1550   35D5   EE                       .BYTE %11101110
 1551   35D6   EE                       .BYTE %11101110
 1552   35D7   00                       .BYTE %00000000
 1553   35D8   77                       .BYTE %01110111
 1554   35D9   77                       .BYTE %01110111
 1555   35DA   77                       .BYTE %01110111
 1556   35DB   00                       .BYTE %00000000
 1557                           
 1558   35DC   10                       .BYTE %00010000      ;Spike
 1559   35DD   10                       .BYTE %00010000
 1560   35DE   38                       .BYTE %00111000
 1561   35DF   38                       .BYTE %00111000
 1562   35E0   7C                       .BYTE %01111100
 1563   35E1   7C                       .BYTE %01111100
 1564   35E2   FE                       .BYTE %11111110
 1565   35E3   FE                       .BYTE %11111110
 1566                           
 1567   35E4                                   include scrtab.inc
 1568                           ;Screen Y lookup table - low bytes first
 1569   35E4   00 20 40 60 80   ytab1:  .BYTE $00,$20,$40,$60,$80,$a0,$c0,$e0,$00,$20,$40,$60,$80,$a0,$c0,$e0
        35E9   A0 C0 E0 00 20 
        35EE   40 60 80 A0 C0 
        35F3   E0 
 1570   35F4   00 20 40 60 80           .BYTE $00,$20,$40,$60,$80,$a0,$c0,$e0,$00,$20,$40,$60,$80,$a0,$c0,$e0
        35F9   A0 C0 E0 00 20 
        35FE   40 60 80 A0 C0 
        3603   E0 
 1571   3604   00 20 40 60 80           .BYTE $00,$20,$40,$60,$80,$a0,$c0,$e0,$00,$20,$40,$60,$80,$a0,$c0,$e0
        3609   A0 C0 E0 00 20 
        360E   40 60 80 A0 C0 
        3613   E0 
 1572   3614   00 20 40 60 80           .BYTE $00,$20,$40,$60,$80,$a0,$c0,$e0,$00,$20,$40,$60,$80,$a0,$c0,$e0
        3619   A0 C0 E0 00 20 
        361E   40 60 80 A0 C0 
        3623   E0 
 1573   3624   00 20 40 60 80           .BYTE $00,$20,$40,$60,$80,$a0,$c0,$e0,$00,$20,$40,$60,$80,$a0,$c0,$e0
        3629   A0 C0 E0 00 20 
        362E   40 60 80 A0 C0 
        3633   E0 
 1574   3634   00 20 40 60 80           .BYTE $00,$20,$40,$60,$80,$a0,$c0,$e0,$00,$20,$40,$60,$80,$a0,$c0,$e0
        3639   A0 C0 E0 00 20 
        363E   40 60 80 A0 C0 
        3643   E0 
 1575   3644   00 20 40 60 80           .BYTE $00,$20,$40,$60,$80,$a0,$c0,$e0,$00,$20,$40,$60,$80,$a0,$c0,$e0
        3649   A0 C0 E0 00 20 
        364E   40 60 80 A0 C0 
        3653   E0 
 1576   3654   00 20 40 60 80           .BYTE $00,$20,$40,$60,$80,$a0,$c0,$e0,$00,$20,$40,$60,$80,$a0,$c0,$e0
        3659   A0 C0 E0 00 20 
        365E   40 60 80 A0 C0 
        3663   E0 
 1577   3664   00 20 40 60 80           .BYTE $00,$20,$40,$60,$80,$a0,$c0,$e0,$00,$20,$40,$60,$80,$a0,$c0,$e0
        3669   A0 C0 E0 00 20 
        366E   40 60 80 A0 C0 
        3673   E0 
 1578   3674   00 20 40 60 80           .BYTE $00,$20,$40,$60,$80,$a0,$c0,$e0,$00,$20,$40,$60,$80,$a0,$c0,$e0
        3679   A0 C0 E0 00 20 
        367E   40 60 80 A0 C0 
        3683   E0 
 1579                           
 1580                           ;Then high bytes
 1581   3684   00 00 00 00 00   ytab2:  .BYTE $00,$00,$00,$00,$00,$00,$00,$00,$01,$01,$01,$01,$01,$01,$01,$01
        3689   00 00 00 01 01 
        368E   01 01 01 01 01 
        3693   01 
 1582   3694   02 02 02 02 02           .BYTE $02,$02,$02,$02,$02,$02,$02,$02,$03,$03,$03,$03,$03,$03,$03,$03
        3699   02 02 02 03 03 
        369E   03 03 03 03 03 
        36A3   03 
 1583   36A4   04 04 04 04 04           .BYTE $04,$04,$04,$04,$04,$04,$04,$04,$05,$05,$05,$05,$05,$05,$05,$05
        36A9   04 04 04 05 05 
        36AE   05 05 05 05 05 
        36B3   05 
 1584   36B4   06 06 06 06 06           .BYTE $06,$06,$06,$06,$06,$06,$06,$06,$07,$07,$07,$07,$07,$07,$07,$07
        36B9   06 06 06 07 07 
        36BE   07 07 07 07 07 
        36C3   07 
 1585   36C4   08 08 08 08 08           .BYTE $08,$08,$08,$08,$08,$08,$08,$08,$09,$09,$09,$09,$09,$09,$09,$09
        36C9   08 08 08 09 09 
        36CE   09 09 09 09 09 
        36D3   09 
 1586   36D4   0A 0A 0A 0A 0A           .BYTE $0a,$0a,$0a,$0a,$0a,$0a,$0a,$0a,$0b,$0b,$0b,$0b,$0b,$0b,$0b,$0b
        36D9   0A 0A 0A 0B 0B 
        36DE   0B 0B 0B 0B 0B 
        36E3   0B 
 1587   36E4   0C 0C 0C 0C 0C           .BYTE $0c,$0c,$0c,$0c,$0c,$0c,$0c,$0c,$0d,$0d,$0d,$0d,$0d,$0d,$0d,$0d
        36E9   0C 0C 0C 0D 0D 
        36EE   0D 0D 0D 0D 0D 
        36F3   0D 
 1588   36F4   0E 0E 0E 0E 0E           .BYTE $0e,$0e,$0e,$0e,$0e,$0e,$0e,$0e,$0f,$0f,$0f,$0f,$0f,$0f,$0f,$0f
        36F9   0E 0E 0E 0F 0F 
        36FE   0F 0F 0F 0F 0F 
        3703   0F 
 1589   3704   10 10 10 10 10           .BYTE $10,$10,$10,$10,$10,$10,$10,$10,$11,$11,$11,$11,$11,$11,$11,$11
        3709   10 10 10 11 11 
        370E   11 11 11 11 11 
        3713   11 
 1590   3714   12 12 12 12 12           .BYTE $12,$12,$12,$12,$12,$12,$12,$12,$13,$13,$13,$13,$13,$13,$13,$13
        3719   12 12 12 13 13 
        371E   13 13 13 13 13 
        3723   13 
 1591                           
 1592   3724   00 20 40 60 80   scrptr: .BYTE $00,$20,$40,$60,$80,$A0,$C0,$e0
        3729   A0 C0 E0 
 1593                           
 1594   372C                                   include mfont.inc
 1595                           ;MONOCHROME VERSION
 1596                           
 1597   372C                    livenum:
 1598   372C   3E 71 71 71 71   .db $3E,$71,$71,$71,$71,$71,$3E,$00 ;0
        3731   71 3E 00 
 1599   3734   3C 1C 1C 1C 1C   .db $3C,$1C,$1C,$1C,$1C,$1C,$1C,$00 ;1
        3739   1C 1C 00 
 1600   373C   7E 07 07 3E 70   .db $7E,$07,$07,$3E,$70,$70,$7F,$00 ;2
        3741   70 7F 00 
 1601   3744   3E 47 07 1E 07   .db $3E,$47,$07,$1E,$07,$47,$3E,$00 ;3
        3749   47 3E 00 
 1602   374C   1E 2E 4E 4E 4E   .db $1E,$2E,$4E,$4E,$4E,$7F,$0E,$00 ;4
        3751   7F 0E 00 
 1603   3754   7F 70 70 7E 07   .db $7F,$70,$70,$7E,$07,$07,$7E,$00 ;5
        3759   07 7E 00 
 1604   375C   3F 70 70 7E 47   .db $3F,$70,$70,$7E,$47,$47,$3E,$00 ;6
        3761   47 3E 00 
 1605   3764   7F 47 0E 0E 1C   .db $7F,$47,$0E,$0E,$1C,$1C,$1C,$00 ;7
        3769   1C 1C 00 
 1606   376C   3E 71 71 3E 47   .db $3E,$71,$71,$3E,$47,$47,$3E,$00 ;8
        3771   47 3E 00 
 1607   3774   3E 71 71 3F 07   .db $3E,$71,$71,$3F,$07,$07,$7E,$00 ;9
        3779   07 7E 00 
 1608                           
 1609                           
 1610   377C                    dispbot:
 1611   377C   70 70 70 70 70   .db $70,$70,$70,$70,$70,$70,$7F,$00 ;L
        3781   70 7F 00 
 1612   3784   1C 1C 1C 1C 1C   .db $1C,$1C,$1C,$1C,$1C,$1C,$1C,$00 ;I
        3789   1C 1C 00 
 1613   378C   71 71 71 71 3E   .db $71,$71,$71,$71,$3E,$1C,$08,$00 ;V
        3791   1C 08 00 
 1614   3794   7F 70 70 7F 70   .db $7F,$70,$70,$7F,$70,$70,$7F,$00 ;E
        3799   70 7F 00 
 1615   379C   3E 71 70 3E 07   .db $3E,$71,$70,$3E,$07,$47,$3E,$00 ;S
        37A1   47 3E 00 
 1616   37A4   00 30 30 00 00   .db $00,$30,$30,$00,$00,$30,$30,$00 ;:
        37A9   30 30 00 
 1617                           
 1618   37AC                    timedb:
 1619   37AC   7F 1C 1C 1C 1C   .db $7F,$1C,$1C,$1C,$1C,$1C,$1C,$00 ;T
        37B1   1C 1C 00 
 1620   37B4   1C 1C 1C 1C 1C   .db $1C,$1C,$1C,$1C,$1C,$1C,$1C,$00 ;I
        37B9   1C 1C 00 
 1621   37BC   7E 5B 5B 5B 5B   .db $7E,$5B,$5B,$5B,$5B,$5B,$5B,$00 ;M
        37C1   5B 5B 00 
 1622   37C4   7F 70 70 7F 70   .db $7F,$70,$70,$7F,$70,$70,$7F,$00 ;E
        37C9   70 7F 00 
 1623   37CC   00 30 30 00 00   .db $00,$30,$30,$00,$00,$30,$30,$00 ;:
        37D1   30 30 00 
 1624                           
 1625   37D4                    title:
 1626   37D4   7E 71 71 71 7E   .db $7E,$71,$71,$71,$7E,$70,$70,$00 ;P
        37D9   70 70 00 
 1627   37DC   7E 71 71 7E 47   .db $7E,$71,$71,$7E,$47,$47,$47,$00 ;R
        37E1   47 47 00 
 1628   37E4   7F 70 70 7F 70   .db $7F,$70,$70,$7F,$70,$70,$7F,$00 ;E
        37E9   70 7F 00 
 1629   37EC   3E 71 70 3E 07   .db $3E,$71,$70,$3E,$07,$47,$3E,$00 ;S
        37F1   47 3E 00 
 1630   37F4   3E 71 70 3E 07   .db $3E,$71,$70,$3E,$07,$47,$3E,$00 ;S
        37F9   47 3E 00 
 1631   37FC   00 00 00 00 00   .db $00,$00,$00,$00,$00,$00,$00,$00 ; space
        3801   00 00 00 
 1632   3804   7F 70 70 7F 70   .db $7F,$70,$70,$7F,$70,$70,$70,$00 ;F
        3809   70 70 00 
 1633   380C   1C 1C 1C 1C 1C   .db $1C,$1C,$1C,$1C,$1C,$1C,$1C,$00 ;I
        3811   1C 1C 00 
 1634   3814   7E 71 71 7E 47   .db $7E,$71,$71,$7E,$47,$47,$47,$00 ;R
        3819   47 47 00 
 1635   381C   7F 70 70 7F 70   .db $7F,$70,$70,$7F,$70,$70,$7F,$00 ;E
        3821   70 7F 00 
 1636                           
 1637   3824                                   include msprites.inc
 1638                           ;MONOCHROME VERSION
 1639                           
 1640                           ;Sprite data - 16x16, 1 bit per pixel
 1641   3824                    sprites: 
 1642   3824   00 00            .BYTE %00000000,%00000000 ;Player right
 1643   3826   00 00            .BYTE %00000000,%00000000
 1644   3828   18 00            .BYTE %00011000,%00000000
 1645   382A   3C 00            .BYTE %00111100,%00000000
 1646   382C   3C 00            .BYTE %00111100,%00000000
 1647   382E   3C 00            .BYTE %00111100,%00000000
 1648   3830   18 00            .BYTE %00011000,%00000000
 1649   3832   3C 00            .BYTE %00111100,%00000000
 1650   3834   7E 00            .BYTE %01111110,%00000000
 1651   3836   7E 00            .BYTE %01111110,%00000000
 1652   3838   FF 00            .BYTE %11111111,%00000000
 1653   383A   FB 00            .BYTE %11111011,%00000000
 1654   383C   3C 00            .BYTE %00111100,%00000000
 1655   383E   38 00            .BYTE %00111000,%00000000
 1656   3840   66 00            .BYTE %01100110,%00000000
 1657   3842   77 00            .BYTE %01110111,%00000000
 1658                           
 1659   3844   00 00            .BYTE %00000000,%00000000
 1660   3846   06 00            .BYTE %00000110,%00000000
 1661   3848   0F 00            .BYTE %00001111,%00000000
 1662   384A   0F 00            .BYTE %00001111,%00000000
 1663   384C   0F 00            .BYTE %00001111,%00000000
 1664   384E   06 00            .BYTE %00000110,%00000000
 1665   3850   0F 00            .BYTE %00001111,%00000000
 1666   3852   1F 80            .BYTE %00011111,%10000000
 1667   3854   1F 80            .BYTE %00011111,%10000000
 1668   3856   1F 80            .BYTE %00011111,%10000000
 1669   3858   1F 80            .BYTE %00011111,%10000000
 1670   385A   0F 00            .BYTE %00001111,%00000000
 1671   385C   0F 00            .BYTE %00001111,%00000000
 1672   385E   06 00            .BYTE %00000110,%00000000
 1673   3860   06 00            .BYTE %00000110,%00000000
 1674   3862   07 00            .BYTE %00000111,%00000000
 1675                           
 1676   3864   00 00            .BYTE %00000000,%00000000
 1677   3866   00 00            .BYTE %00000000,%00000000
 1678   3868   03 00            .BYTE %00000011,%00000000
 1679   386A   07 80            .BYTE %00000111,%10000000
 1680   386C   07 80            .BYTE %00000111,%10000000
 1681   386E   07 80            .BYTE %00000111,%10000000
 1682   3870   03 00            .BYTE %00000011,%00000000
 1683   3872   07 80            .BYTE %00000111,%10000000
 1684   3874   0F C0            .BYTE %00001111,%11000000
 1685   3876   0F C0            .BYTE %00001111,%11000000
 1686   3878   1F E0            .BYTE %00011111,%11100000
 1687   387A   1F 60            .BYTE %00011111,%01100000
 1688   387C   07 80            .BYTE %00000111,%10000000
 1689   387E   07 00            .BYTE %00000111,%00000000
 1690   3880   0C C0            .BYTE %00001100,%11000000
 1691   3882   0E E0            .BYTE %00001110,%11100000
 1692                           
 1693   3884   00 00            .BYTE %00000000,%00000000
 1694   3886   00 60            .BYTE %00000000,%01100000
 1695   3888   00 F0            .BYTE %00000000,%11110000
 1696   388A   00 F0            .BYTE %00000000,%11110000
 1697   388C   00 F0            .BYTE %00000000,%11110000
 1698   388E   00 60            .BYTE %00000000,%01100000
 1699   3890   00 F0            .BYTE %00000000,%11110000
 1700   3892   01 F8            .BYTE %00000001,%11111000
 1701   3894   03 FC            .BYTE %00000011,%11111100
 1702   3896   03 FC            .BYTE %00000011,%11111100
 1703   3898   07 FE            .BYTE %00000111,%11111110
 1704   389A   06 F6            .BYTE %00000110,%11110110
 1705   389C   00 F0            .BYTE %00000000,%11110000
 1706   389E   01 98            .BYTE %00000001,%10011000
 1707   38A0   03 0C            .BYTE %00000011,%00001100
 1708   38A2   03 8E            .BYTE %00000011,%10001110
 1709                           
 1710   38A4   00 00            .BYTE %00000000,%00000000 ;Player left
 1711   38A6   06 00            .BYTE %00000110,%00000000  
 1712   38A8   0F 00            .BYTE %00001111,%00000000
 1713   38AA   0F 00            .BYTE %00001111,%00000000
 1714   38AC   0F 00            .BYTE %00001111,%00000000
 1715   38AE   06 00            .BYTE %00000110,%00000000
 1716   38B0   0F 00            .BYTE %00001111,%00000000
 1717   38B2   1F 80            .BYTE %00011111,%10000000
 1718   38B4   3F C0            .BYTE %00111111,%11000000
 1719   38B6   3F C0            .BYTE %00111111,%11000000
 1720   38B8   7F E0            .BYTE %01111111,%11100000
 1721   38BA   6F 60            .BYTE %01101111,%01100000
 1722   38BC   0F 00            .BYTE %00001111,%00000000
 1723   38BE   19 80            .BYTE %00011001,%10000000
 1724   38C0   30 C0            .BYTE %00110000,%11000000
 1725   38C2   71 C0            .BYTE %01110001,%11000000
 1726                           
 1727   38C4   00 00            .BYTE %00000000,%00000000
 1728   38C6   00 00            .BYTE %00000000,%00000000
 1729   38C8   00 C0            .BYTE %00000000,%11000000
 1730   38CA   01 E0            .BYTE %00000001,%11100000
 1731   38CC   01 E0            .BYTE %00000001,%11100000
 1732   38CE   01 E0            .BYTE %00000001,%11100000
 1733   38D0   00 C0            .BYTE %00000000,%11000000
 1734   38D2   01 E0            .BYTE %00000001,%11100000
 1735   38D4   03 F0            .BYTE %00000011,%11110000
 1736   38D6   03 F0            .BYTE %00000011,%11110000
 1737   38D8   07 F8            .BYTE %00000111,%11111000
 1738   38DA   06 F8            .BYTE %00000110,%11111000
 1739   38DC   01 E0            .BYTE %00000001,%11100000
 1740   38DE   00 E0            .BYTE %00000000,%11100000
 1741   38E0   03 30            .BYTE %00000011,%00110000
 1742   38E2   07 70            .BYTE %00000111,%01110000
 1743                           
 1744   38E4   00 00            .BYTE %00000000,%00000000
 1745   38E6   00 60            .BYTE %00000000,%01100000
 1746   38E8   00 F0            .BYTE %00000000,%11110000
 1747   38EA   00 F0            .BYTE %00000000,%11110000
 1748   38EC   00 F0            .BYTE %00000000,%11110000
 1749   38EE   00 60            .BYTE %00000000,%01100000
 1750   38F0   00 F0            .BYTE %00000000,%11110000
 1751   38F2   01 F8            .BYTE %00000001,%11111000
 1752   38F4   01 F8            .BYTE %00000001,%11111000
 1753   38F6   01 F8            .BYTE %00000001,%11111000
 1754   38F8   01 F8            .BYTE %00000001,%11111000
 1755   38FA   00 F0            .BYTE %00000000,%11110000
 1756   38FC   00 F0            .BYTE %00000000,%11110000
 1757   38FE   00 60            .BYTE %00000000,%01100000
 1758   3900   00 60            .BYTE %00000000,%01100000
 1759   3902   00 E0            .BYTE %00000000,%11100000
 1760                           
 1761   3904   00 00            .BYTE %00000000,%00000000
 1762   3906   00 00            .BYTE %00000000,%00000000
 1763   3908   00 18            .BYTE %00000000,%00011000
 1764   390A   00 3C            .BYTE %00000000,%00111100
 1765   390C   00 3C            .BYTE %00000000,%00111100
 1766   390E   00 3C            .BYTE %00000000,%00111100
 1767   3910   00 18            .BYTE %00000000,%00011000
 1768   3912   00 3C            .BYTE %00000000,%00111100
 1769   3914   00 7E            .BYTE %00000000,%01111110
 1770   3916   00 7E            .BYTE %00000000,%01111110
 1771   3918   00 FF            .BYTE %00000000,%11111111
 1772   391A   00 DF            .BYTE %00000000,%11011111
 1773   391C   00 3C            .BYTE %00000000,%00111100
 1774   391E   00 1C            .BYTE %00000000,%00011100
 1775   3920   00 66            .BYTE %00000000,%01100110
 1776   3922   00 EE            .BYTE %00000000,%11101110
 1777                           
 1778   3924   00 00            .BYTE %00000000,%00000000 ;Worm (enemy) left
 1779   3926   00 00            .BYTE %00000000,%00000000
 1780   3928   00 00            .BYTE %00000000,%00000000
 1781   392A   00 00            .BYTE %00000000,%00000000
 1782   392C   00 00            .BYTE %00000000,%00000000
 1783   392E   00 00            .BYTE %00000000,%00000000
 1784   3930   00 00            .BYTE %00000000,%00000000
 1785   3932   00 00            .BYTE %00000000,%00000000
 1786   3934   00 00            .BYTE %00000000,%00000000
 1787   3936   00 00            .BYTE %00000000,%00000000
 1788   3938   18 00            .BYTE %00011000,%00000000
 1789   393A   3C 00            .BYTE %00111100,%00000000
 1790   393C   7E 00            .BYTE %01111110,%00000000
 1791   393E   66 00            .BYTE %01100110,%00000000
 1792   3940   E7 00            .BYTE %11100111,%00000000
 1793   3942   66 00            .BYTE %01100110,%00000000
 1794   3944   00 00            .BYTE %00000000,%00000000
 1795   3946   00 00            .BYTE %00000000,%00000000
 1796   3948   00 00            .BYTE %00000000,%00000000
 1797   394A   00 00            .BYTE %00000000,%00000000
 1798   394C   00 00            .BYTE %00000000,%00000000
 1799   394E   00 00            .BYTE %00000000,%00000000
 1800   3950   00 00            .BYTE %00000000,%00000000
 1801   3952   00 00            .BYTE %00000000,%00000000
 1802   3954   00 00            .BYTE %00000000,%00000000
 1803   3956   00 00            .BYTE %00000000,%00000000
 1804   3958   00 00            .BYTE %00000000,%00000000
 1805   395A   00 00            .BYTE %00000000,%00000000
 1806   395C   0F 80            .BYTE %00001111,%10000000
 1807   395E   7F F0            .BYTE %01111111,%11110000
 1808   3960   FF F8            .BYTE %11111111,%11111000
 1809   3962   70 70            .BYTE %01110000,%01110000
 1810   3964   00 00            .BYTE %00000000,%00000000
 1811   3966   00 00            .BYTE %00000000,%00000000
 1812   3968   00 00            .BYTE %00000000,%00000000
 1813   396A   00 00            .BYTE %00000000,%00000000
 1814   396C   00 00            .BYTE %00000000,%00000000
 1815   396E   00 00            .BYTE %00000000,%00000000
 1816   3970   00 00            .BYTE %00000000,%00000000
 1817   3972   00 00            .BYTE %00000000,%00000000
 1818   3974   00 00            .BYTE %00000000,%00000000
 1819   3976   00 00            .BYTE %00000000,%00000000
 1820   3978   00 00            .BYTE %00000000,%00000000
 1821   397A   00 00            .BYTE %00000000,%00000000
 1822   397C   00 00            .BYTE %00000000,%00000000
 1823   397E   7F FE            .BYTE %01111111,%11111110
 1824   3980   FF FF            .BYTE %11111111,%11111111
 1825   3982   7F FE            .BYTE %01111111,%11111110
 1826   3984   00 00            .BYTE %00000000,%00000000
 1827   3986   00 00            .BYTE %00000000,%00000000
 1828   3988   00 00            .BYTE %00000000,%00000000
 1829   398A   00 00            .BYTE %00000000,%00000000
 1830   398C   00 00            .BYTE %00000000,%00000000
 1831   398E   00 00            .BYTE %00000000,%00000000
 1832   3990   00 00            .BYTE %00000000,%00000000
 1833   3992   00 00            .BYTE %00000000,%00000000
 1834   3994   00 00            .BYTE %00000000,%00000000
 1835   3996   00 00            .BYTE %00000000,%00000000
 1836   3998   00 00            .BYTE %00000000,%00000000
 1837   399A   00 00            .BYTE %00000000,%00000000
 1838   399C   01 F0            .BYTE %00000001,%11110000
 1839   399E   0F FE            .BYTE %00001111,%11111110
 1840   39A0   1F FF            .BYTE %00011111,%11111111
 1841   39A2   0E 0E            .BYTE %00001110,%00001110
 1842   39A4   00 00            .BYTE %00000000,%00000000 ;Worm right
 1843   39A6   00 00            .BYTE %00000000,%00000000
 1844   39A8   00 00            .BYTE %00000000,%00000000
 1845   39AA   00 00            .BYTE %00000000,%00000000
 1846   39AC   00 00            .BYTE %00000000,%00000000
 1847   39AE   00 00            .BYTE %00000000,%00000000
 1848   39B0   00 00            .BYTE %00000000,%00000000
 1849   39B2   00 00            .BYTE %00000000,%00000000
 1850   39B4   00 00            .BYTE %00000000,%00000000
 1851   39B6   00 00            .BYTE %00000000,%00000000
 1852   39B8   00 00            .BYTE %00000000,%00000000
 1853   39BA   00 00            .BYTE %00000000,%00000000
 1854   39BC   0F 80            .BYTE %00001111,%10000000
 1855   39BE   7F F0            .BYTE %01111111,%11110000
 1856   39C0   FF F8            .BYTE %11111111,%11111000
 1857   39C2   70 70            .BYTE %01110000,%01110000
 1858   39C4   00 00            .BYTE %00000000,%00000000
 1859   39C6   00 00            .BYTE %00000000,%00000000
 1860   39C8   00 00            .BYTE %00000000,%00000000
 1861   39CA   00 00            .BYTE %00000000,%00000000
 1862   39CC   00 00            .BYTE %00000000,%00000000
 1863   39CE   00 00            .BYTE %00000000,%00000000
 1864   39D0   00 00            .BYTE %00000000,%00000000
 1865   39D2   00 00            .BYTE %00000000,%00000000
 1866   39D4   00 00            .BYTE %00000000,%00000000
 1867   39D6   00 00            .BYTE %00000000,%00000000
 1868   39D8   00 00            .BYTE %00000000,%00000000
 1869   39DA   00 00            .BYTE %00000000,%00000000
 1870   39DC   00 00            .BYTE %00000000,%00000000
 1871   39DE   7F FE            .BYTE %01111111,%11111110
 1872   39E0   FF FF            .BYTE %11111111,%11111111
 1873   39E2   7F FE            .BYTE %01111111,%11111110
 1874   39E4   00 00            .BYTE %00000000,%00000000
 1875   39E6   00 00            .BYTE %00000000,%00000000
 1876   39E8   00 00            .BYTE %00000000,%00000000
 1877   39EA   00 00            .BYTE %00000000,%00000000
 1878   39EC   00 00            .BYTE %00000000,%00000000
 1879   39EE   00 00            .BYTE %00000000,%00000000
 1880   39F0   00 00            .BYTE %00000000,%00000000
 1881   39F2   00 00            .BYTE %00000000,%00000000
 1882   39F4   00 00            .BYTE %00000000,%00000000
 1883   39F6   00 00            .BYTE %00000000,%00000000
 1884   39F8   00 00            .BYTE %00000000,%00000000
 1885   39FA   00 00            .BYTE %00000000,%00000000
 1886   39FC   01 F0            .BYTE %00000001,%11110000
 1887   39FE   0F FE            .BYTE %00001111,%11111110
 1888   3A00   1F FF            .BYTE %00011111,%11111111
 1889   3A02   0E 0E            .BYTE %00001110,%00001110
 1890   3A04   00 00            .BYTE %00000000,%00000000
 1891   3A06   00 00            .BYTE %00000000,%00000000
 1892   3A08   00 00            .BYTE %00000000,%00000000
 1893   3A0A   00 00            .BYTE %00000000,%00000000
 1894   3A0C   00 00            .BYTE %00000000,%00000000
 1895   3A0E   00 00            .BYTE %00000000,%00000000
 1896   3A10   00 00            .BYTE %00000000,%00000000
 1897   3A12   00 00            .BYTE %00000000,%00000000
 1898   3A14   00 00            .BYTE %00000000,%00000000
 1899   3A16   00 00            .BYTE %00000000,%00000000
 1900   3A18   00 18            .BYTE %00000000,%00011000
 1901   3A1A   00 3C            .BYTE %00000000,%00111100
 1902   3A1C   00 7E            .BYTE %00000000,%01111110
 1903   3A1E   00 66            .BYTE %00000000,%01100110
 1904   3A20   00 E7            .BYTE %00000000,%11100111
 1905   3A22   00 66            .BYTE %00000000,%01100110
 1906                           
 1907                           
 1908   3A24   DB               doorspr:.BYTE %11011011   ;Door sprite - 16x16, 1 bit per pixel
 1909   3A25   B6                       .BYTE %10110110   ;This is stored in screen format (ie 4 8x8 chunks)
 1910   3A26   6D                       .BYTE %01101101
 1911   3A27   DB                       .BYTE %11011011
 1912   3A28   B6                       .BYTE %10110110
 1913   3A29   6D                       .BYTE %01101101
 1914   3A2A   DB                       .BYTE %11011011
 1915   3A2B   B6                       .BYTE %10110110
 1916   3A2C                            
 1917   3A2C   6D                       .BYTE %01101101
 1918   3A2D   DB                       .BYTE %11011011
 1919   3A2E   B6                       .BYTE %10110110
 1920   3A2F   6D                       .BYTE %01101101
 1921   3A30   DB                       .BYTE %11011011
 1922   3A31   B6                       .BYTE %10110110
 1923   3A32   6D                       .BYTE %01101101
 1924   3A33   DB                       .BYTE %11011011
 1925                           
 1926   3A34   6D                       .BYTE %01101101
 1927   3A35   DB                       .BYTE %11011011
 1928   3A36   B6                       .BYTE %10110110
 1929   3A37   6D                       .BYTE %01101101
 1930   3A38   DB                       .BYTE %11011011
 1931   3A39   B6                       .BYTE %10110110
 1932   3A3A   6D                       .BYTE %01101101
 1933   3A3B   DB                       .BYTE %11011011
 1934   3A3C                            
 1935   3A3C   B6                       .BYTE %10110110
 1936   3A3D   6D                       .BYTE %01101101
 1937   3A3E   DB                       .BYTE %11011011
 1938   3A3F   B6                       .BYTE %10110110
 1939   3A40   6D                       .BYTE %01101101
 1940   3A41   DB                       .BYTE %11011011
 1941   3A42   B6                       .BYTE %10110110
 1942   3A43   6D                       .BYTE %01101101
 1943                           
 1944   3A44   0C               keyspr: .BYTE %00001100  ;Key sprite - 8x8, 1 bit per pixel
 1945   3A45   12                       .BYTE %00010010
 1946   3A46   21                       .BYTE %00100001
 1947   3A47   21                       .BYTE %00100001
 1948   3A48   12                       .BYTE %00010010
 1949   3A49   AC                       .BYTE %10101100
 1950   3A4A   40                       .BYTE %01000000
 1951   3A4B   80                       .BYTE %10000000
 1952                           
 1953   3A4C                                   include levels.inc
 1954   3A4C   F23A 7A3A        levtab: .WORD levv1,lev1h ;Level address tables - first word compressed data
 1955   3A50   333B 983A                .WORD levv2,lev2h ;second word is header
 1956   3A54   653B B63A                .WORD levv3,lev3h
 1957   3A58   A43B D43A                .WORD levv4,lev4h
 1958                           
 1959                           ;Level header
 1960                           ;This is replaced with whatever level is being played
 1961   3A5C   0F 00 01 10 0B   levhead: .byte 15,0,1,16,11,2,30,16 ;These are the 4 keys, alternating X,Y locations
        3A61   02 1E 10 
 1962   3A64   01 11                    .byte 1,17                  ;Door location
 1963                           
 1964   3A66   70 88 70 EE 00           .byte 112,136,112,238,0     ;Enemies - initial X, initial Y, leftmost X, 
 1965   3A6B   A0 00 A0 EE 00           .byte 160,0,160,238,0       ;rightmost X, starting direction (0=left, 1=right)
 1966   3A70   A0 10 A0 EE 00           .byte 160,16,160,238,0
 1967   3A75   A0 20 A0 EE 00           .byte 160,32,160,238,0
 1968                           
 1969                           
 1970                           ;Levels - headers first
 1971   3A7A   0F 00 01 10 0B   lev1h:  .BYTE 15,0,1,16,11,2,30,16
        3A7F   02 1E 10 
 1972   3A82   01 11                    .BYTE 1,17
 1973                           
 1974   3A84   70 88 70 EE 00           .BYTE 112,136,112,238,0
 1975   3A89   00 C8 01 EE FF           .BYTE 0,200,1,238,255
 1976   3A8E   00 C8 01 EE FF           .BYTE 0,200,1,238,255
 1977   3A93   00 C8 01 EE FF           .BYTE 0,200,1,238,255
 1978                           
 1979   3A98   01 04 1E 04 1E   lev2h:  .BYTE 1,4,30,4,30,16,16,4
        3A9D   10 10 04 
 1980   3AA0   1D 0B                    .BYTE 29,11
 1981                           
 1982   3AA2   40 88 08 E8 01           .BYTE 64,136,8,232,1
 1983   3AA7   48 28 48 70 00           .BYTE 72,40,72,112,0
 1984   3AAC   80 28 80 A8 00           .BYTE 128,40,128,168,0
 1985   3AB1   C0 28 C0 E8 00           .BYTE 192,40,192,232,0
 1986                           
 1987   3AB6   01 00 1E 00 01   lev3h:  .BYTE 1,0,30,0,1,6,30,6
        3ABB   06 1E 06 
 1988   3ABE   1D 11                    .BYTE 29,17
 1989                           
 1990   3AC0   08 18 08 40 00           .BYTE 8,24,8,64,0
 1991   3AC5   08 48 08 40 00           .BYTE 8,72,8,64,0
 1992   3ACA   E8 18 B0 E8 01           .BYTE 232,24,176,232,1
 1993   3ACF   E8 48 B0 E8 01           .BYTE 232,72,176,232,1
 1994                           
 1995   3AD4   01 03 1E 03 0E   lev4h:  .BYTE 1,3,30,3,14,3,17,3
        3AD9   03 11 03 
 1996   3ADC   1D 11                    .BYTE 29,17
 1997                           
 1998   3ADE   30 60 30 58 00           .BYTE 48,96,48,88,0
 1999   3AE3   88 60 68 88 01           .BYTE 136,96,104,136,1
 2000   3AE8   98 60 98 C0 00           .BYTE 152,96,152,192,0
 2001   3AED   30 80 30 C0 00           .BYTE 48,128,48,192,0
 2002                           
 2003                           ;Then compressed data
 2004                           ;Compression format is :
 2005                           ; bits 0-1 - block type (0=air, 1=floor, 2=wall, 3=spike)
 2006                           ; bits 2-7 - block count minus 1
 2007                           ;255 marks the end of level data
 2008                           ;Levels are 32x20 blocks
 2009                           
 2010   3AF2   06               levv1:   .BYTE 6
 2011   3AF3   78               .BYTE 120
 2012   3AF4   0A               .BYTE 10
 2013   3AF5   78               .BYTE 120
 2014   3AF6   0A               .BYTE 10
 2015   3AF7   78               .BYTE 120
 2016   3AF8   0A               .BYTE 10
 2017   3AF9   3C               .BYTE 60
 2018   3AFA   0E               .BYTE 14
 2019   3AFB   30               .BYTE 48
 2020   3AFC   0A               .BYTE 10
 2021   3AFD   28               .BYTE 40
 2022   3AFE   16               .BYTE 22
 2023   3AFF   3C               .BYTE 60
 2024   3B00   0A               .BYTE 10
 2025   3B01   78               .BYTE 120
 2026   3B02   0A               .BYTE 10
 2027   3B03   78               .BYTE 120
 2028   3B04   0A               .BYTE 10
 2029   3B05   20               .BYTE 32
 2030   3B06   25               .BYTE 37
 2031   3B07   34               .BYTE 52
 2032   3B08   0A               .BYTE 10
 2033   3B09   54               .BYTE 84
 2034   3B0A   07               .BYTE 7
 2035   3B0B   20               .BYTE 32
 2036   3B0C   0A               .BYTE 10
 2037   3B0D   40               .BYTE 64
 2038   3B0E   0D               .BYTE 13
 2039   3B0F   08               .BYTE 8
 2040   3B10   06               .BYTE 6
 2041   3B11   20               .BYTE 32
 2042   3B12   0A               .BYTE 10
 2043   3B13   54               .BYTE 84
 2044   3B14   06               .BYTE 6
 2045   3B15   20               .BYTE 32
 2046   3B16   0A               .BYTE 10
 2047   3B17   44               .BYTE 68
 2048   3B18   21               .BYTE 33
 2049   3B19   14               .BYTE 20
 2050   3B1A   0A               .BYTE 10
 2051   3B1B   78               .BYTE 120
 2052   3B1C   0A               .BYTE 10
 2053   3B1D   3C               .BYTE 60
 2054   3B1E   05               .BYTE 5
 2055   3B1F   38               .BYTE 56
 2056   3B20   0A               .BYTE 10
 2057   3B21   2C               .BYTE 44
 2058   3B22   05               .BYTE 5
 2059   3B23   48               .BYTE 72
 2060   3B24   0A               .BYTE 10
 2061   3B25   78               .BYTE 120
 2062   3B26   0A               .BYTE 10
 2063   3B27   1C               .BYTE 28
 2064   3B28   05               .BYTE 5
 2065   3B29   58               .BYTE 88
 2066   3B2A   0A               .BYTE 10
 2067   3B2B   78               .BYTE 120
 2068   3B2C   0A               .BYTE 10
 2069   3B2D   10               .BYTE 16
 2070   3B2E   07               .BYTE 7
 2071   3B2F   64               .BYTE 100
 2072   3B30   06               .BYTE 6
 2073   3B31   81               .BYTE 125+4
 2074   3B32   FF               .BYTE $FF
 2075                           
 2076   3B33   06               levv2: .BYTE 6
 2077   3B34   78               .BYTE 120
 2078   3B35   0A               .BYTE 10
 2079   3B36   78               .BYTE 120
 2080   3B37   0A               .BYTE 10
 2081   3B38   78               .BYTE 120
 2082   3B39   0A               .BYTE 10
 2083   3B3A   78               .BYTE 120
 2084   3B3B   0A               .BYTE 10
 2085   3B3C   78               .BYTE 120
 2086   3B3D   0A               .BYTE 10
 2087   3B3E   78               .BYTE 120
 2088   3B3F   0A               .BYTE 10
 2089   3B40   78               .BYTE 120
 2090   3B41   0A               .BYTE 10
 2091   3B42   15               .BYTE 21
 2092   3B43   0C               .BYTE 12
 2093   3B44   59               .BYTE 89
 2094   3B45   0A               .BYTE 10
 2095   3B46   78               .BYTE 120
 2096   3B47   0A               .BYTE 10
 2097   3B48   78               .BYTE 120
 2098   3B49   0A               .BYTE 10
 2099   3B4A   14               .BYTE 20
 2100   3B4B   0D               .BYTE 13
 2101   3B4C   58               .BYTE 88
 2102   3B4D   0A               .BYTE 10
 2103   3B4E   78               .BYTE 120
 2104   3B4F   0A               .BYTE 10
 2105   3B50   78               .BYTE 120
 2106   3B51   0A               .BYTE 10
 2107   3B52   20               .BYTE 32
 2108   3B53   11               .BYTE 17
 2109   3B54   30               .BYTE 48
 2110   3B55   19               .BYTE 25
 2111   3B56   0A               .BYTE 10
 2112   3B57   78               .BYTE 120
 2113   3B58   0A               .BYTE 10
 2114   3B59   78               .BYTE 120
 2115   3B5A   0A               .BYTE 10
 2116   3B5B   0C               .BYTE 12
 2117   3B5C   51               .BYTE 81
 2118   3B5D   1C               .BYTE 28
 2119   3B5E   0A               .BYTE 10
 2120   3B5F   78               .BYTE 120
 2121   3B60   0A               .BYTE 10
 2122   3B61   78               .BYTE 120
 2123   3B62   06               .BYTE 6
 2124   3B63   81               .BYTE 125+4
 2125   3B64   FF               .BYTE $FF
 2126                           
 2127   3B65   06               levv3: .BYTE 6
 2128   3B66   78               .BYTE 120
 2129   3B67   0A               .BYTE 10
 2130   3B68   78               .BYTE 120
 2131   3B69   0A               .BYTE 10
 2132   3B6A   78               .BYTE 120
 2133   3B6B   0A               .BYTE 10
 2134   3B6C   78               .BYTE 120
 2135   3B6D   0A               .BYTE 10
 2136   3B6E   78               .BYTE 120
 2137   3B6F   0A               .BYTE 10
 2138   3B70   25               .BYTE 37
 2139   3B71   30               .BYTE 48
 2140   3B72   25               .BYTE 37
 2141   3B73   0A               .BYTE 10
 2142   3B74   78               .BYTE 120
 2143   3B75   0A               .BYTE 10
 2144   3B76   78               .BYTE 120
 2145   3B77   0A               .BYTE 10
 2146   3B78   2C               .BYTE 44
 2147   3B79   09               .BYTE 9
 2148   3B7A   10               .BYTE 16
 2149   3B7B   0D               .BYTE 13
 2150   3B7C   28               .BYTE 40
 2151   3B7D   0A               .BYTE 10
 2152   3B7E   28               .BYTE 40
 2153   3B7F   05               .BYTE 5
 2154   3B80   4C               .BYTE 76
 2155   3B81   0A               .BYTE 10
 2156   3B82   78               .BYTE 120
 2157   3B83   0A               .BYTE 10
 2158   3B84   25               .BYTE 37
 2159   3B85   30               .BYTE 48
 2160   3B86   25               .BYTE 37
 2161   3B87   0A               .BYTE 10
 2162   3B88   78               .BYTE 120
 2163   3B89   0A               .BYTE 10
 2164   3B8A   30               .BYTE 48
 2165   3B8B   05               .BYTE 5
 2166   3B8C   20               .BYTE 32
 2167   3B8D   05               .BYTE 5
 2168   3B8E   20               .BYTE 32
 2169   3B8F   0A               .BYTE 10
 2170   3B90   48               .BYTE 72
 2171   3B91   05               .BYTE 5
 2172   3B92   2C               .BYTE 44
 2173   3B93   0A               .BYTE 10
 2174   3B94   3C               .BYTE 60
 2175   3B95   05               .BYTE 5
 2176   3B96   38               .BYTE 56
 2177   3B97   0A               .BYTE 10
 2178   3B98   30               .BYTE 48
 2179   3B99   05               .BYTE 5
 2180   3B9A   44               .BYTE 68
 2181   3B9B   0A               .BYTE 10
 2182   3B9C   24               .BYTE 36
 2183   3B9D   05               .BYTE 5
 2184   3B9E   50               .BYTE 80
 2185   3B9F   0A               .BYTE 10
 2186   3BA0   78               .BYTE 120
 2187   3BA1   06               .BYTE 6
 2188   3BA2   81               .BYTE 125+4
 2189   3BA3   FF               .BYTE $FF
 2190                           
 2191   3BA4   06               levv4: .BYTE 6
 2192   3BA5   78               .BYTE 120
 2193   3BA6   0A               .BYTE 10
 2194   3BA7   78               .BYTE 120
 2195   3BA8   0A               .BYTE 10
 2196   3BA9   78               .BYTE 120
 2197   3BAA   0A               .BYTE 10
 2198   3BAB   78               .BYTE 120
 2199   3BAC   0A               .BYTE 10
 2200   3BAD   78               .BYTE 120
 2201   3BAE   0A               .BYTE 10
 2202   3BAF   11               .BYTE 17
 2203   3BB0   28               .BYTE 40
 2204   3BB1   0B               .BYTE 11
 2205   3BB2   28               .BYTE 40
 2206   3BB3   11               .BYTE 17
 2207   3BB4   0A               .BYTE 10
 2208   3BB5   30               .BYTE 48
 2209   3BB6   19               .BYTE 25
 2210   3BB7   30               .BYTE 48
 2211   3BB8   0A               .BYTE 10
 2212   3BB9   78               .BYTE 120
 2213   3BBA   0A               .BYTE 10
 2214   3BBB   14               .BYTE 20
 2215   3BBC   09               .BYTE 9
 2216   3BBD   14               .BYTE 20
 2217   3BBE   05               .BYTE 5
 2218   3BBF   10               .BYTE 16
 2219   3BC0   05               .BYTE 5
 2220   3BC1   14               .BYTE 20
 2221   3BC2   09               .BYTE 9
 2222   3BC3   14               .BYTE 20
 2223   3BC4   0A               .BYTE 10
 2224   3BC5   78               .BYTE 120
 2225   3BC6   0A               .BYTE 10
 2226   3BC7   78               .BYTE 120
 2227   3BC8   0A               .BYTE 10
 2228   3BC9   20               .BYTE 32
 2229   3BCA   05               .BYTE 5
 2230   3BCB   08               .BYTE 8
 2231   3BCC   05               .BYTE 5
 2232   3BCD   1C               .BYTE 28
 2233   3BCE   05               .BYTE 5
 2234   3BCF   08               .BYTE 8
 2235   3BD0   05               .BYTE 5
 2236   3BD1   1C               .BYTE 28
 2237   3BD2   0A               .BYTE 10
 2238   3BD3   78               .BYTE 120
 2239   3BD4   0A               .BYTE 10
 2240   3BD5   78               .BYTE 120
 2241   3BD6   0A               .BYTE 10
 2242   3BD7   14               .BYTE 20
 2243   3BD8   51               .BYTE 81
 2244   3BD9   14               .BYTE 20
 2245   3BDA   0A               .BYTE 10
 2246   3BDB   78               .BYTE 120
 2247   3BDC   0A               .BYTE 10
 2248   3BDD   10               .BYTE 16
 2249   3BDE   05               .BYTE 5
 2250   3BDF   50               .BYTE 80
 2251   3BE0   05               .BYTE 5
 2252   3BE1   10               .BYTE 16
 2253   3BE2   0A               .BYTE 10
 2254   3BE3   78               .BYTE 120
 2255   3BE4   0A               .BYTE 10
 2256   3BE5   14               .BYTE 20
 2257   3BE6   53               .BYTE 83
 2258   3BE7   14               .BYTE 20
 2259   3BE8   06               .BYTE 6
 2260   3BE9   81               .BYTE 125+4
 2261   3BEA   FF               .BYTE $FF
 2262                           
 2263   3BEB                    eind_asm



           Lines Assembled :  2263             Assembly Errors :  0



